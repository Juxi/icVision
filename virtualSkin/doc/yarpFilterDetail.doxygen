/*! \page filter YARP Filter Detail

\section YARP RemoteControlBoard

The <a href="http://eris.liralab.it/yarpdoc/classyarp_1_1dev_1_1RemoteControlBoard.html">RemoteControlBoard</a> is YARP's interface to a motor, and to each instance belongs three YARP ports:

- /NameOfYourRemoteControlBoard/command:i
- /NameOfYourRemoteControlBoard/state:o
- /NameOfYourRemoteControlBoard/rpc:i

The YarpFilter creates a trio of ports named:

- /NameOfYourRemoteControlBoardF/command:i
- /NameOfYourRemoteControlBoardF/state:o
- /NameOfYourRemoteControlBoardF/rpc:i

... and connects them to the RemoteControlBoard as shown here:

\image html controlboardfilter.png "Control Board Filter Architecture"

As you can see, the names of the filtered ports reflect the names of the unfiltered iCub motor control ports, however an "F" has been appended to the robot name to signify that the port is filtered. The filtered ports allow transparent access to the underlying RemoteControlBoard, however during the course of execution, the filter can intervene in two ways:

-# Cut the connection between the filtered ports and the RemoteControlBoard, such that motor control commands are no longer forwarded
-# Inject commands into the RemoteControlBoard whether or not the connection has been cut.

Furthermore, the YarpFilter provides a mechanism for you to analyze the data passing through the filter and build your own custom handlers for that data. The IObserver interface can be inherited into your custom handler class, such that its onDataObserved() method is called every time data moves through the filter. Similarly, the IReplier interface can be inherited into your custom handler of RPC calls, which will only be invoked when the filter is cut (after all the RPC client expects a response). Of course, in order to activate your custom handlers you have to pass them to the YarpFilter object.

Consider the following example:

\verbatim
yarp::os::ControlBoardFilter cbf;
YourIObserverChildClass observer;
YourIReplierChildClass replier;

cbf.setStateObserver(&observer);
cbf.setCommandObserver(&observer);
cbf.setCallObserver(&observer);
cbf.setResponseObserver(&observer);
cbf.setReplier(&replier);
\endverbatim

2011-01-01, Kail Frank - <a href="mailto:kail@idsia.ch">kail@idsia.ch</a>
*/
