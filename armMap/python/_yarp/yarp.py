# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_yarp', [dirname(__file__)])
        except ImportError:
            import _yarp
            return _yarp
        if fp is not None:
            try:
                _mod = imp.load_module('_yarp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _yarp = swig_import_helper()
    del swig_import_helper
else:
    import _yarp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _yarp.SwigPyIterator_value(self)
    def incr(self, n = 1): return _yarp.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _yarp.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _yarp.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _yarp.SwigPyIterator_equal(self, *args)
    def copy(self): return _yarp.SwigPyIterator_copy(self)
    def next(self): return _yarp.SwigPyIterator_next(self)
    def __next__(self): return _yarp.SwigPyIterator___next__(self)
    def previous(self): return _yarp.SwigPyIterator_previous(self)
    def advance(self, *args): return _yarp.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _yarp.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _yarp.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _yarp.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _yarp.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _yarp.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _yarp.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _yarp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ConstString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstString, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_ConstString
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _yarp.new_ConstString(*args)
        try: self.this.append(this)
        except: self.this = this
    def c_str(self): return _yarp.ConstString_c_str(self)
    def isEqual(self, *args): return _yarp.ConstString_isEqual(self, *args)
    def notEqual(self, *args): return _yarp.ConstString_notEqual(self, *args)
    def __add__(self, *args): return _yarp.ConstString___add__(self, *args)
    def __iadd__(self, *args): return _yarp.ConstString___iadd__(self, *args)
    def length(self): return _yarp.ConstString_length(self)
    def find(self, *args): return _yarp.ConstString_find(self, *args)
    def substr(self, *args): return _yarp.ConstString_substr(self, *args)
    __swig_setmethods__["npos"] = _yarp.ConstString_npos_set
    __swig_getmethods__["npos"] = _yarp.ConstString_npos_get
    if _newclass:npos = _swig_property(_yarp.ConstString_npos_get, _yarp.ConstString_npos_set)
    __swig_getmethods__["toString"] = lambda x: _yarp.ConstString_toString
    if _newclass:toString = staticmethod(_yarp.ConstString_toString)
ConstString_swigregister = _yarp.ConstString_swigregister
ConstString_swigregister(ConstString)
cvar = _yarp.cvar

def ConstString_toString(*args):
  return _yarp.ConstString_toString(*args)
ConstString_toString = _yarp.ConstString_toString

class PortInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _yarp.new_PortInfo()
        try: self.this.append(this)
        except: self.this = this
    PORTINFO_NULL = _yarp.PortInfo_PORTINFO_NULL
    PORTINFO_CONNECTION = _yarp.PortInfo_PORTINFO_CONNECTION
    PORTINFO_MISC = _yarp.PortInfo_PORTINFO_MISC
    __swig_setmethods__["tag"] = _yarp.PortInfo_tag_set
    __swig_getmethods__["tag"] = _yarp.PortInfo_tag_get
    if _newclass:tag = _swig_property(_yarp.PortInfo_tag_get, _yarp.PortInfo_tag_set)
    __swig_setmethods__["incoming"] = _yarp.PortInfo_incoming_set
    __swig_getmethods__["incoming"] = _yarp.PortInfo_incoming_get
    if _newclass:incoming = _swig_property(_yarp.PortInfo_incoming_get, _yarp.PortInfo_incoming_set)
    __swig_setmethods__["created"] = _yarp.PortInfo_created_set
    __swig_getmethods__["created"] = _yarp.PortInfo_created_get
    if _newclass:created = _swig_property(_yarp.PortInfo_created_get, _yarp.PortInfo_created_set)
    __swig_setmethods__["portName"] = _yarp.PortInfo_portName_set
    __swig_getmethods__["portName"] = _yarp.PortInfo_portName_get
    if _newclass:portName = _swig_property(_yarp.PortInfo_portName_get, _yarp.PortInfo_portName_set)
    __swig_setmethods__["sourceName"] = _yarp.PortInfo_sourceName_set
    __swig_getmethods__["sourceName"] = _yarp.PortInfo_sourceName_get
    if _newclass:sourceName = _swig_property(_yarp.PortInfo_sourceName_get, _yarp.PortInfo_sourceName_set)
    __swig_setmethods__["targetName"] = _yarp.PortInfo_targetName_set
    __swig_getmethods__["targetName"] = _yarp.PortInfo_targetName_get
    if _newclass:targetName = _swig_property(_yarp.PortInfo_targetName_get, _yarp.PortInfo_targetName_set)
    __swig_setmethods__["carrierName"] = _yarp.PortInfo_carrierName_set
    __swig_getmethods__["carrierName"] = _yarp.PortInfo_carrierName_get
    if _newclass:carrierName = _swig_property(_yarp.PortInfo_carrierName_get, _yarp.PortInfo_carrierName_set)
    __swig_setmethods__["message"] = _yarp.PortInfo_message_set
    __swig_getmethods__["message"] = _yarp.PortInfo_message_get
    if _newclass:message = _swig_property(_yarp.PortInfo_message_get, _yarp.PortInfo_message_set)
    __swig_destroy__ = _yarp.delete_PortInfo
    __del__ = lambda self : None;
PortInfo_swigregister = _yarp.PortInfo_swigregister
PortInfo_swigregister(PortInfo)

class PortReport(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortReport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortReport, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_PortReport
    __del__ = lambda self : None;
    def report(self, *args): return _yarp.PortReport_report(self, *args)
PortReport_swigregister = _yarp.PortReport_swigregister
PortReport_swigregister(PortReport)

class Contact(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contact, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contact, name)
    __repr__ = _swig_repr
    __swig_getmethods__["empty"] = lambda x: _yarp.Contact_empty
    if _newclass:empty = staticmethod(_yarp.Contact_empty)
    __swig_getmethods__["invalid"] = lambda x: _yarp.Contact_invalid
    if _newclass:invalid = staticmethod(_yarp.Contact_invalid)
    __swig_getmethods__["byName"] = lambda x: _yarp.Contact_byName
    if _newclass:byName = staticmethod(_yarp.Contact_byName)
    __swig_getmethods__["byCarrier"] = lambda x: _yarp.Contact_byCarrier
    if _newclass:byCarrier = staticmethod(_yarp.Contact_byCarrier)
    __swig_getmethods__["byConfig"] = lambda x: _yarp.Contact_byConfig
    if _newclass:byConfig = staticmethod(_yarp.Contact_byConfig)
    def addCarrier(self, *args): return _yarp.Contact_addCarrier(self, *args)
    __swig_getmethods__["bySocket"] = lambda x: _yarp.Contact_bySocket
    if _newclass:bySocket = staticmethod(_yarp.Contact_bySocket)
    def addSocket(self, *args): return _yarp.Contact_addSocket(self, *args)
    def addName(self, *args): return _yarp.Contact_addName(self, *args)
    __swig_getmethods__["convertHostToIp"] = lambda x: _yarp.Contact_convertHostToIp
    if _newclass:convertHostToIp = staticmethod(_yarp.Contact_convertHostToIp)
    __swig_destroy__ = _yarp.delete_Contact
    __del__ = lambda self : None;
    def getName(self): return _yarp.Contact_getName(self)
    def getHost(self): return _yarp.Contact_getHost(self)
    def getCarrier(self): return _yarp.Contact_getCarrier(self)
    def getPort(self): return _yarp.Contact_getPort(self)
    def toString_c(self): return _yarp.Contact_toString_c(self)
    __swig_getmethods__["fromString"] = lambda x: _yarp.Contact_fromString
    if _newclass:fromString = staticmethod(_yarp.Contact_fromString)
    def isValid(self): return _yarp.Contact_isValid(self)
    def __init__(self, *args): 
        this = _yarp.new_Contact(*args)
        try: self.this.append(this)
        except: self.this = this
Contact_swigregister = _yarp.Contact_swigregister
Contact_swigregister(Contact)

def Contact_empty():
  return _yarp.Contact_empty()
Contact_empty = _yarp.Contact_empty

def Contact_invalid():
  return _yarp.Contact_invalid()
Contact_invalid = _yarp.Contact_invalid

def Contact_byName(*args):
  return _yarp.Contact_byName(*args)
Contact_byName = _yarp.Contact_byName

def Contact_byCarrier(*args):
  return _yarp.Contact_byCarrier(*args)
Contact_byCarrier = _yarp.Contact_byCarrier

def Contact_byConfig(*args):
  return _yarp.Contact_byConfig(*args)
Contact_byConfig = _yarp.Contact_byConfig

def Contact_bySocket(*args):
  return _yarp.Contact_bySocket(*args)
Contact_bySocket = _yarp.Contact_bySocket

def Contact_convertHostToIp(*args):
  return _yarp.Contact_convertHostToIp(*args)
Contact_convertHostToIp = _yarp.Contact_convertHostToIp

def Contact_fromString(*args):
  return _yarp.Contact_fromString(*args)
Contact_fromString = _yarp.Contact_fromString

class ConnectionReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectionReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectionReader, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_ConnectionReader
    __del__ = lambda self : None;
    def expectBlock(self, *args): return _yarp.ConnectionReader_expectBlock(self, *args)
    def expectText(self, terminatingChar = '\n'): return _yarp.ConnectionReader_expectText(self, terminatingChar)
    def expectInt(self): return _yarp.ConnectionReader_expectInt(self)
    def expectDouble(self): return _yarp.ConnectionReader_expectDouble(self)
    def isTextMode(self): return _yarp.ConnectionReader_isTextMode(self)
    def convertTextMode(self): return _yarp.ConnectionReader_convertTextMode(self)
    def getSize(self): return _yarp.ConnectionReader_getSize(self)
    def getWriter(self): return _yarp.ConnectionReader_getWriter(self)
    def readEnvelope(self): return _yarp.ConnectionReader_readEnvelope(self)
    def getReference(self): return _yarp.ConnectionReader_getReference(self)
    def getRemoteContact(self): return _yarp.ConnectionReader_getRemoteContact(self)
    def getLocalContact(self): return _yarp.ConnectionReader_getLocalContact(self)
    def isValid(self): return _yarp.ConnectionReader_isValid(self)
    def isActive(self): return _yarp.ConnectionReader_isActive(self)
    def isError(self): return _yarp.ConnectionReader_isError(self)
    def requestDrop(self): return _yarp.ConnectionReader_requestDrop(self)
ConnectionReader_swigregister = _yarp.ConnectionReader_swigregister
ConnectionReader_swigregister(ConnectionReader)

class ConnectionWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectionWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectionWriter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_ConnectionWriter
    __del__ = lambda self : None;
    def appendBlock(self, *args): return _yarp.ConnectionWriter_appendBlock(self, *args)
    def appendInt(self, *args): return _yarp.ConnectionWriter_appendInt(self, *args)
    def appendDouble(self, *args): return _yarp.ConnectionWriter_appendDouble(self, *args)
    def appendString(self, *args): return _yarp.ConnectionWriter_appendString(self, *args)
    def appendExternalBlock(self, *args): return _yarp.ConnectionWriter_appendExternalBlock(self, *args)
    def isTextMode(self): return _yarp.ConnectionWriter_isTextMode(self)
    def declareSizes(self, *args): return _yarp.ConnectionWriter_declareSizes(self, *args)
    def setReplyHandler(self, *args): return _yarp.ConnectionWriter_setReplyHandler(self, *args)
    def setReference(self, *args): return _yarp.ConnectionWriter_setReference(self, *args)
    def convertTextMode(self): return _yarp.ConnectionWriter_convertTextMode(self)
    def isValid(self): return _yarp.ConnectionWriter_isValid(self)
    def isActive(self): return _yarp.ConnectionWriter_isActive(self)
    def isError(self): return _yarp.ConnectionWriter_isError(self)
    def requestDrop(self): return _yarp.ConnectionWriter_requestDrop(self)
ConnectionWriter_swigregister = _yarp.ConnectionWriter_swigregister
ConnectionWriter_swigregister(ConnectionWriter)

class PortReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortReader, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_PortReader
    __del__ = lambda self : None;
    def read(self, *args): return _yarp.PortReader_read(self, *args)
    def __init__(self): 
        if self.__class__ == PortReader:
            _self = None
        else:
            _self = self
        this = _yarp.new_PortReader(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _yarp.disown_PortReader(self)
        return weakref_proxy(self)
PortReader_swigregister = _yarp.PortReader_swigregister
PortReader_swigregister(PortReader)

class PortWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortWriter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_PortWriter
    __del__ = lambda self : None;
    def write(self, *args): return _yarp.PortWriter_write(self, *args)
    def onCompletion(self): return _yarp.PortWriter_onCompletion(self)
    def onCommencement(self): return _yarp.PortWriter_onCommencement(self)
PortWriter_swigregister = _yarp.PortWriter_swigregister
PortWriter_swigregister(PortWriter)

class Portable(PortReader,PortWriter):
    __swig_setmethods__ = {}
    for _s in [PortReader,PortWriter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Portable, name, value)
    __swig_getmethods__ = {}
    for _s in [PortReader,PortWriter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Portable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def read(self, *args): return _yarp.Portable_read(self, *args)
    def write(self, *args): return _yarp.Portable_write(self, *args)
    __swig_destroy__ = _yarp.delete_Portable
    __del__ = lambda self : None;
Portable_swigregister = _yarp.Portable_swigregister
Portable_swigregister(Portable)

class SearchReport(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SearchReport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SearchReport, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _yarp.SearchReport_key_set
    __swig_getmethods__["key"] = _yarp.SearchReport_key_get
    if _newclass:key = _swig_property(_yarp.SearchReport_key_get, _yarp.SearchReport_key_set)
    __swig_setmethods__["value"] = _yarp.SearchReport_value_set
    __swig_getmethods__["value"] = _yarp.SearchReport_value_get
    if _newclass:value = _swig_property(_yarp.SearchReport_value_get, _yarp.SearchReport_value_set)
    __swig_setmethods__["isFound"] = _yarp.SearchReport_isFound_set
    __swig_getmethods__["isFound"] = _yarp.SearchReport_isFound_get
    if _newclass:isFound = _swig_property(_yarp.SearchReport_isFound_get, _yarp.SearchReport_isFound_set)
    __swig_setmethods__["isGroup"] = _yarp.SearchReport_isGroup_set
    __swig_getmethods__["isGroup"] = _yarp.SearchReport_isGroup_get
    if _newclass:isGroup = _swig_property(_yarp.SearchReport_isGroup_get, _yarp.SearchReport_isGroup_set)
    __swig_setmethods__["isComment"] = _yarp.SearchReport_isComment_set
    __swig_getmethods__["isComment"] = _yarp.SearchReport_isComment_get
    if _newclass:isComment = _swig_property(_yarp.SearchReport_isComment_get, _yarp.SearchReport_isComment_set)
    __swig_setmethods__["isDefault"] = _yarp.SearchReport_isDefault_set
    __swig_getmethods__["isDefault"] = _yarp.SearchReport_isDefault_get
    if _newclass:isDefault = _swig_property(_yarp.SearchReport_isDefault_get, _yarp.SearchReport_isDefault_set)
    def __init__(self): 
        this = _yarp.new_SearchReport()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_SearchReport
    __del__ = lambda self : None;
SearchReport_swigregister = _yarp.SearchReport_swigregister
SearchReport_swigregister(SearchReport)

class SearchMonitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SearchMonitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SearchMonitor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_SearchMonitor
    __del__ = lambda self : None;
    def report(self, *args): return _yarp.SearchMonitor_report(self, *args)
SearchMonitor_swigregister = _yarp.SearchMonitor_swigregister
SearchMonitor_swigregister(SearchMonitor)

class Searchable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Searchable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Searchable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_Searchable
    __del__ = lambda self : None;
    def find(self, *args): return _yarp.Searchable_find(self, *args)
    def findGroup(self, *args): return _yarp.Searchable_findGroup(self, *args)
    def check(self, *args): return _yarp.Searchable_check(self, *args)
    def isNull(self): return _yarp.Searchable_isNull(self)
    def toString_c(self): return _yarp.Searchable_toString_c(self)
    def setMonitor(self, *args): return _yarp.Searchable_setMonitor(self, *args)
    def getMonitor(self): return _yarp.Searchable_getMonitor(self)
    def getContext(self): return _yarp.Searchable_getContext(self)
    def reportToMonitor(self, *args): return _yarp.Searchable_reportToMonitor(self, *args)
Searchable_swigregister = _yarp.Searchable_swigregister
Searchable_swigregister(Searchable)

class Value(Portable,Searchable):
    __swig_setmethods__ = {}
    for _s in [Portable,Searchable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Value, name, value)
    __swig_getmethods__ = {}
    for _s in [Portable,Searchable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Value, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_Value(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_Value
    __del__ = lambda self : None;
    def isInt(self): return _yarp.Value_isInt(self)
    def isString(self): return _yarp.Value_isString(self)
    def isDouble(self): return _yarp.Value_isDouble(self)
    def isList(self): return _yarp.Value_isList(self)
    def isVocab(self): return _yarp.Value_isVocab(self)
    def isBlob(self): return _yarp.Value_isBlob(self)
    def asInt(self): return _yarp.Value_asInt(self)
    def asVocab(self): return _yarp.Value_asVocab(self)
    def asDouble(self): return _yarp.Value_asDouble(self)
    def asString(self): return _yarp.Value_asString(self)
    def asList(self): return _yarp.Value_asList(self)
    def asBlob(self): return _yarp.Value_asBlob(self)
    def asBlobLength(self): return _yarp.Value_asBlobLength(self)
    def read(self, *args): return _yarp.Value_read(self, *args)
    def write(self, *args): return _yarp.Value_write(self, *args)
    def check(self, *args): return _yarp.Value_check(self, *args)
    def find(self, *args): return _yarp.Value_find(self, *args)
    def findGroup(self, *args): return _yarp.Value_findGroup(self, *args)
    def isEqual(self, *args): return _yarp.Value_isEqual(self, *args)
    def notEqual(self, *args): return _yarp.Value_notEqual(self, *args)
    def fromString(self, *args): return _yarp.Value_fromString(self, *args)
    def toString_c(self): return _yarp.Value_toString_c(self)
    def create(self): return _yarp.Value_create(self)
    def clone(self): return _yarp.Value_clone(self)
    def getCode(self): return _yarp.Value_getCode(self)
    def isNull(self): return _yarp.Value_isNull(self)
    def isLeaf(self): return _yarp.Value_isLeaf(self)
    __swig_getmethods__["makeInt"] = lambda x: _yarp.Value_makeInt
    if _newclass:makeInt = staticmethod(_yarp.Value_makeInt)
    __swig_getmethods__["makeDouble"] = lambda x: _yarp.Value_makeDouble
    if _newclass:makeDouble = staticmethod(_yarp.Value_makeDouble)
    __swig_getmethods__["makeString"] = lambda x: _yarp.Value_makeString
    if _newclass:makeString = staticmethod(_yarp.Value_makeString)
    __swig_getmethods__["makeVocab"] = lambda x: _yarp.Value_makeVocab
    if _newclass:makeVocab = staticmethod(_yarp.Value_makeVocab)
    __swig_getmethods__["makeBlob"] = lambda x: _yarp.Value_makeBlob
    if _newclass:makeBlob = staticmethod(_yarp.Value_makeBlob)
    __swig_getmethods__["makeList"] = lambda x: _yarp.Value_makeList
    if _newclass:makeList = staticmethod(_yarp.Value_makeList)
    __swig_getmethods__["makeValue"] = lambda x: _yarp.Value_makeValue
    if _newclass:makeValue = staticmethod(_yarp.Value_makeValue)
    __swig_getmethods__["getNullValue"] = lambda x: _yarp.Value_getNullValue
    if _newclass:getNullValue = staticmethod(_yarp.Value_getNullValue)
    def toString(self): return _yarp.Value_toString(self)
Value_swigregister = _yarp.Value_swigregister
Value_swigregister(Value)

def Value_makeInt(*args):
  return _yarp.Value_makeInt(*args)
Value_makeInt = _yarp.Value_makeInt

def Value_makeDouble(*args):
  return _yarp.Value_makeDouble(*args)
Value_makeDouble = _yarp.Value_makeDouble

def Value_makeString(*args):
  return _yarp.Value_makeString(*args)
Value_makeString = _yarp.Value_makeString

def Value_makeVocab(*args):
  return _yarp.Value_makeVocab(*args)
Value_makeVocab = _yarp.Value_makeVocab

def Value_makeBlob(*args):
  return _yarp.Value_makeBlob(*args)
Value_makeBlob = _yarp.Value_makeBlob

def Value_makeList(*args):
  return _yarp.Value_makeList(*args)
Value_makeList = _yarp.Value_makeList

def Value_makeValue(*args):
  return _yarp.Value_makeValue(*args)
Value_makeValue = _yarp.Value_makeValue

def Value_getNullValue():
  return _yarp.Value_getNullValue()
Value_getNullValue = _yarp.Value_getNullValue

class Contactable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contactable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contactable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_Contactable
    __del__ = lambda self : None;
    def open(self, *args): return _yarp.Contactable_open(self, *args)
    def addOutput(self, *args): return _yarp.Contactable_addOutput(self, *args)
    def close(self): return _yarp.Contactable_close(self)
    def interrupt(self): return _yarp.Contactable_interrupt(self)
    def where(self): return _yarp.Contactable_where(self)
    def getName(self): return _yarp.Contactable_getName(self)
    def setEnvelope(self, *args): return _yarp.Contactable_setEnvelope(self, *args)
    def getEnvelope(self, *args): return _yarp.Contactable_getEnvelope(self, *args)
    def getInputCount(self): return _yarp.Contactable_getInputCount(self)
    def getOutputCount(self): return _yarp.Contactable_getOutputCount(self)
    def getReport(self, *args): return _yarp.Contactable_getReport(self, *args)
    def setReporter(self, *args): return _yarp.Contactable_setReporter(self, *args)
    def isWriting(self): return _yarp.Contactable_isWriting(self)
Contactable_swigregister = _yarp.Contactable_swigregister
Contactable_swigregister(Contactable)

class ContactStyle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactStyle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContactStyle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["admin"] = _yarp.ContactStyle_admin_set
    __swig_getmethods__["admin"] = _yarp.ContactStyle_admin_get
    if _newclass:admin = _swig_property(_yarp.ContactStyle_admin_get, _yarp.ContactStyle_admin_set)
    __swig_setmethods__["quiet"] = _yarp.ContactStyle_quiet_set
    __swig_getmethods__["quiet"] = _yarp.ContactStyle_quiet_get
    if _newclass:quiet = _swig_property(_yarp.ContactStyle_quiet_get, _yarp.ContactStyle_quiet_set)
    __swig_setmethods__["timeout"] = _yarp.ContactStyle_timeout_set
    __swig_getmethods__["timeout"] = _yarp.ContactStyle_timeout_get
    if _newclass:timeout = _swig_property(_yarp.ContactStyle_timeout_get, _yarp.ContactStyle_timeout_set)
    __swig_setmethods__["carrier"] = _yarp.ContactStyle_carrier_set
    __swig_getmethods__["carrier"] = _yarp.ContactStyle_carrier_get
    if _newclass:carrier = _swig_property(_yarp.ContactStyle_carrier_get, _yarp.ContactStyle_carrier_set)
    __swig_setmethods__["expectReply"] = _yarp.ContactStyle_expectReply_set
    __swig_getmethods__["expectReply"] = _yarp.ContactStyle_expectReply_get
    if _newclass:expectReply = _swig_property(_yarp.ContactStyle_expectReply_get, _yarp.ContactStyle_expectReply_set)
    def __init__(self): 
        this = _yarp.new_ContactStyle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_ContactStyle
    __del__ = lambda self : None;
ContactStyle_swigregister = _yarp.ContactStyle_swigregister
ContactStyle_swigregister(ContactStyle)

class NetworkBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkBase, name)
    __repr__ = _swig_repr
    __swig_getmethods__["initMinimum"] = lambda x: _yarp.NetworkBase_initMinimum
    if _newclass:initMinimum = staticmethod(_yarp.NetworkBase_initMinimum)
    __swig_getmethods__["finiMinimum"] = lambda x: _yarp.NetworkBase_finiMinimum
    if _newclass:finiMinimum = staticmethod(_yarp.NetworkBase_finiMinimum)
    __swig_getmethods__["connect"] = lambda x: _yarp.NetworkBase_connect
    if _newclass:connect = staticmethod(_yarp.NetworkBase_connect)
    __swig_getmethods__["disconnect"] = lambda x: _yarp.NetworkBase_disconnect
    if _newclass:disconnect = staticmethod(_yarp.NetworkBase_disconnect)
    __swig_getmethods__["isConnected"] = lambda x: _yarp.NetworkBase_isConnected
    if _newclass:isConnected = staticmethod(_yarp.NetworkBase_isConnected)
    __swig_getmethods__["exists"] = lambda x: _yarp.NetworkBase_exists
    if _newclass:exists = staticmethod(_yarp.NetworkBase_exists)
    __swig_getmethods__["sync"] = lambda x: _yarp.NetworkBase_sync
    if _newclass:sync = staticmethod(_yarp.NetworkBase_sync)
    __swig_getmethods__["main"] = lambda x: _yarp.NetworkBase_main
    if _newclass:main = staticmethod(_yarp.NetworkBase_main)
    __swig_getmethods__["runNameServer"] = lambda x: _yarp.NetworkBase_runNameServer
    if _newclass:runNameServer = staticmethod(_yarp.NetworkBase_runNameServer)
    __swig_getmethods__["assertion"] = lambda x: _yarp.NetworkBase_assertion
    if _newclass:assertion = staticmethod(_yarp.NetworkBase_assertion)
    __swig_getmethods__["queryName"] = lambda x: _yarp.NetworkBase_queryName
    if _newclass:queryName = staticmethod(_yarp.NetworkBase_queryName)
    __swig_getmethods__["registerName"] = lambda x: _yarp.NetworkBase_registerName
    if _newclass:registerName = staticmethod(_yarp.NetworkBase_registerName)
    __swig_getmethods__["registerContact"] = lambda x: _yarp.NetworkBase_registerContact
    if _newclass:registerContact = staticmethod(_yarp.NetworkBase_registerContact)
    __swig_getmethods__["unregisterName"] = lambda x: _yarp.NetworkBase_unregisterName
    if _newclass:unregisterName = staticmethod(_yarp.NetworkBase_unregisterName)
    __swig_getmethods__["unregisterContact"] = lambda x: _yarp.NetworkBase_unregisterContact
    if _newclass:unregisterContact = staticmethod(_yarp.NetworkBase_unregisterContact)
    __swig_getmethods__["setProperty"] = lambda x: _yarp.NetworkBase_setProperty
    if _newclass:setProperty = staticmethod(_yarp.NetworkBase_setProperty)
    __swig_getmethods__["getProperty"] = lambda x: _yarp.NetworkBase_getProperty
    if _newclass:getProperty = staticmethod(_yarp.NetworkBase_getProperty)
    __swig_getmethods__["getNameServerName"] = lambda x: _yarp.NetworkBase_getNameServerName
    if _newclass:getNameServerName = staticmethod(_yarp.NetworkBase_getNameServerName)
    __swig_getmethods__["getNameServerContact"] = lambda x: _yarp.NetworkBase_getNameServerContact
    if _newclass:getNameServerContact = staticmethod(_yarp.NetworkBase_getNameServerContact)
    __swig_getmethods__["setNameServerName"] = lambda x: _yarp.NetworkBase_setNameServerName
    if _newclass:setNameServerName = staticmethod(_yarp.NetworkBase_setNameServerName)
    __swig_getmethods__["setLocalMode"] = lambda x: _yarp.NetworkBase_setLocalMode
    if _newclass:setLocalMode = staticmethod(_yarp.NetworkBase_setLocalMode)
    __swig_getmethods__["getLocalMode"] = lambda x: _yarp.NetworkBase_getLocalMode
    if _newclass:getLocalMode = staticmethod(_yarp.NetworkBase_getLocalMode)
    __swig_getmethods__["readString"] = lambda x: _yarp.NetworkBase_readString
    if _newclass:readString = staticmethod(_yarp.NetworkBase_readString)
    __swig_getmethods__["checkNetwork"] = lambda x: _yarp.NetworkBase_checkNetwork
    if _newclass:checkNetwork = staticmethod(_yarp.NetworkBase_checkNetwork)
    __swig_getmethods__["initialized"] = lambda x: _yarp.NetworkBase_initialized
    if _newclass:initialized = staticmethod(_yarp.NetworkBase_initialized)
    __swig_getmethods__["setVerbosity"] = lambda x: _yarp.NetworkBase_setVerbosity
    if _newclass:setVerbosity = staticmethod(_yarp.NetworkBase_setVerbosity)
    __swig_getmethods__["queryBypass"] = lambda x: _yarp.NetworkBase_queryBypass
    if _newclass:queryBypass = staticmethod(_yarp.NetworkBase_queryBypass)
    __swig_getmethods__["getEnvironment"] = lambda x: _yarp.NetworkBase_getEnvironment
    if _newclass:getEnvironment = staticmethod(_yarp.NetworkBase_getEnvironment)
    __swig_getmethods__["registerCarrier"] = lambda x: _yarp.NetworkBase_registerCarrier
    if _newclass:registerCarrier = staticmethod(_yarp.NetworkBase_registerCarrier)
    __swig_getmethods__["lock"] = lambda x: _yarp.NetworkBase_lock
    if _newclass:lock = staticmethod(_yarp.NetworkBase_lock)
    __swig_getmethods__["unlock"] = lambda x: _yarp.NetworkBase_unlock
    if _newclass:unlock = staticmethod(_yarp.NetworkBase_unlock)
    __swig_getmethods__["write"] = lambda x: _yarp.NetworkBase_write
    if _newclass:write = staticmethod(_yarp.NetworkBase_write)
    def __init__(self): 
        this = _yarp.new_NetworkBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_NetworkBase
    __del__ = lambda self : None;
NetworkBase_swigregister = _yarp.NetworkBase_swigregister
NetworkBase_swigregister(NetworkBase)

def NetworkBase_initMinimum():
  return _yarp.NetworkBase_initMinimum()
NetworkBase_initMinimum = _yarp.NetworkBase_initMinimum

def NetworkBase_finiMinimum():
  return _yarp.NetworkBase_finiMinimum()
NetworkBase_finiMinimum = _yarp.NetworkBase_finiMinimum

def NetworkBase_connect(*args):
  return _yarp.NetworkBase_connect(*args)
NetworkBase_connect = _yarp.NetworkBase_connect

def NetworkBase_disconnect(*args):
  return _yarp.NetworkBase_disconnect(*args)
NetworkBase_disconnect = _yarp.NetworkBase_disconnect

def NetworkBase_isConnected(*args):
  return _yarp.NetworkBase_isConnected(*args)
NetworkBase_isConnected = _yarp.NetworkBase_isConnected

def NetworkBase_exists(*args):
  return _yarp.NetworkBase_exists(*args)
NetworkBase_exists = _yarp.NetworkBase_exists

def NetworkBase_sync(*args):
  return _yarp.NetworkBase_sync(*args)
NetworkBase_sync = _yarp.NetworkBase_sync

def NetworkBase_main(*args):
  return _yarp.NetworkBase_main(*args)
NetworkBase_main = _yarp.NetworkBase_main

def NetworkBase_runNameServer(*args):
  return _yarp.NetworkBase_runNameServer(*args)
NetworkBase_runNameServer = _yarp.NetworkBase_runNameServer

def NetworkBase_assertion(*args):
  return _yarp.NetworkBase_assertion(*args)
NetworkBase_assertion = _yarp.NetworkBase_assertion

def NetworkBase_queryName(*args):
  return _yarp.NetworkBase_queryName(*args)
NetworkBase_queryName = _yarp.NetworkBase_queryName

def NetworkBase_registerName(*args):
  return _yarp.NetworkBase_registerName(*args)
NetworkBase_registerName = _yarp.NetworkBase_registerName

def NetworkBase_registerContact(*args):
  return _yarp.NetworkBase_registerContact(*args)
NetworkBase_registerContact = _yarp.NetworkBase_registerContact

def NetworkBase_unregisterName(*args):
  return _yarp.NetworkBase_unregisterName(*args)
NetworkBase_unregisterName = _yarp.NetworkBase_unregisterName

def NetworkBase_unregisterContact(*args):
  return _yarp.NetworkBase_unregisterContact(*args)
NetworkBase_unregisterContact = _yarp.NetworkBase_unregisterContact

def NetworkBase_setProperty(*args):
  return _yarp.NetworkBase_setProperty(*args)
NetworkBase_setProperty = _yarp.NetworkBase_setProperty

def NetworkBase_getProperty(*args):
  return _yarp.NetworkBase_getProperty(*args)
NetworkBase_getProperty = _yarp.NetworkBase_getProperty

def NetworkBase_getNameServerName():
  return _yarp.NetworkBase_getNameServerName()
NetworkBase_getNameServerName = _yarp.NetworkBase_getNameServerName

def NetworkBase_getNameServerContact():
  return _yarp.NetworkBase_getNameServerContact()
NetworkBase_getNameServerContact = _yarp.NetworkBase_getNameServerContact

def NetworkBase_setNameServerName(*args):
  return _yarp.NetworkBase_setNameServerName(*args)
NetworkBase_setNameServerName = _yarp.NetworkBase_setNameServerName

def NetworkBase_setLocalMode(*args):
  return _yarp.NetworkBase_setLocalMode(*args)
NetworkBase_setLocalMode = _yarp.NetworkBase_setLocalMode

def NetworkBase_getLocalMode():
  return _yarp.NetworkBase_getLocalMode()
NetworkBase_getLocalMode = _yarp.NetworkBase_getLocalMode

def NetworkBase_readString(eof = None):
  return _yarp.NetworkBase_readString(eof)
NetworkBase_readString = _yarp.NetworkBase_readString

def NetworkBase_checkNetwork():
  return _yarp.NetworkBase_checkNetwork()
NetworkBase_checkNetwork = _yarp.NetworkBase_checkNetwork

def NetworkBase_initialized():
  return _yarp.NetworkBase_initialized()
NetworkBase_initialized = _yarp.NetworkBase_initialized

def NetworkBase_setVerbosity(*args):
  return _yarp.NetworkBase_setVerbosity(*args)
NetworkBase_setVerbosity = _yarp.NetworkBase_setVerbosity

def NetworkBase_queryBypass(*args):
  return _yarp.NetworkBase_queryBypass(*args)
NetworkBase_queryBypass = _yarp.NetworkBase_queryBypass

def NetworkBase_getEnvironment(*args):
  return _yarp.NetworkBase_getEnvironment(*args)
NetworkBase_getEnvironment = _yarp.NetworkBase_getEnvironment

def NetworkBase_registerCarrier(*args):
  return _yarp.NetworkBase_registerCarrier(*args)
NetworkBase_registerCarrier = _yarp.NetworkBase_registerCarrier

def NetworkBase_lock():
  return _yarp.NetworkBase_lock()
NetworkBase_lock = _yarp.NetworkBase_lock

def NetworkBase_unlock():
  return _yarp.NetworkBase_unlock()
NetworkBase_unlock = _yarp.NetworkBase_unlock

def NetworkBase_write(*args):
  return _yarp.NetworkBase_write(*args)
NetworkBase_write = _yarp.NetworkBase_write

class Network(NetworkBase):
    __swig_setmethods__ = {}
    for _s in [NetworkBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Network, name, value)
    __swig_getmethods__ = {}
    for _s in [NetworkBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Network, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _yarp.new_Network()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_Network
    __del__ = lambda self : None;
    __swig_getmethods__["init"] = lambda x: _yarp.Network_init
    if _newclass:init = staticmethod(_yarp.Network_init)
    __swig_getmethods__["fini"] = lambda x: _yarp.Network_fini
    if _newclass:fini = staticmethod(_yarp.Network_fini)
Network_swigregister = _yarp.Network_swigregister
Network_swigregister(Network)

def Network_init():
  return _yarp.Network_init()
Network_init = _yarp.Network_init

def Network_fini():
  return _yarp.Network_fini()
Network_fini = _yarp.Network_fini

class PortablePairBase(Portable):
    __swig_setmethods__ = {}
    for _s in [Portable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortablePairBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Portable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PortablePairBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["readPair"] = lambda x: _yarp.PortablePairBase_readPair
    if _newclass:readPair = staticmethod(_yarp.PortablePairBase_readPair)
    __swig_getmethods__["writePair"] = lambda x: _yarp.PortablePairBase_writePair
    if _newclass:writePair = staticmethod(_yarp.PortablePairBase_writePair)
    __swig_destroy__ = _yarp.delete_PortablePairBase
    __del__ = lambda self : None;
PortablePairBase_swigregister = _yarp.PortablePairBase_swigregister
PortablePairBase_swigregister(PortablePairBase)

def PortablePairBase_readPair(*args):
  return _yarp.PortablePairBase_readPair(*args)
PortablePairBase_readPair = _yarp.PortablePairBase_readPair

def PortablePairBase_writePair(*args):
  return _yarp.PortablePairBase_writePair(*args)
PortablePairBase_writePair = _yarp.PortablePairBase_writePair

class PortReaderCreator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortReaderCreator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortReaderCreator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_PortReaderCreator
    __del__ = lambda self : None;
    def create(self): return _yarp.PortReaderCreator_create(self)
PortReaderCreator_swigregister = _yarp.PortReaderCreator_swigregister
PortReaderCreator_swigregister(PortReaderCreator)

class Property(Searchable,Portable):
    __swig_setmethods__ = {}
    for _s in [Searchable,Portable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Property, name, value)
    __swig_getmethods__ = {}
    for _s in [Searchable,Portable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Property, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_Property(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_Property
    __del__ = lambda self : None;
    def check(self, *args): return _yarp.Property_check(self, *args)
    def put(self, *args): return _yarp.Property_put(self, *args)
    def unput(self, *args): return _yarp.Property_unput(self, *args)
    def find(self, *args): return _yarp.Property_find(self, *args)
    def findGroup(self, *args): return _yarp.Property_findGroup(self, *args)
    def clear(self): return _yarp.Property_clear(self)
    def fromString(self, *args): return _yarp.Property_fromString(self, *args)
    def fromCommand(self, *args): return _yarp.Property_fromCommand(self, *args)
    def fromConfigFile(self, *args): return _yarp.Property_fromConfigFile(self, *args)
    def fromConfig(self, *args): return _yarp.Property_fromConfig(self, *args)
    def fromQuery(self, *args): return _yarp.Property_fromQuery(self, *args)
    def toString_c(self): return _yarp.Property_toString_c(self)
    def read(self, *args): return _yarp.Property_read(self, *args)
    def write(self, *args): return _yarp.Property_write(self, *args)
    def toString(self): return _yarp.Property_toString(self)
Property_swigregister = _yarp.Property_swigregister
Property_swigregister(Property)

class Port(Contactable):
    __swig_setmethods__ = {}
    for _s in [Contactable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Port, name, value)
    __swig_getmethods__ = {}
    for _s in [Contactable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Port, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _yarp.new_Port()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_Port
    __del__ = lambda self : None;
    def openFake(self, *args): return _yarp.Port_openFake(self, *args)
    def addOutput(self, *args): return _yarp.Port_addOutput(self, *args)
    def close(self): return _yarp.Port_close(self)
    def interrupt(self): return _yarp.Port_interrupt(self)
    def where(self): return _yarp.Port_where(self)
    def read(self, *args): return _yarp.Port_read(self, *args)
    def replyAndDrop(self, *args): return _yarp.Port_replyAndDrop(self, *args)
    def setReader(self, *args): return _yarp.Port_setReader(self, *args)
    def setReaderCreator(self, *args): return _yarp.Port_setReaderCreator(self, *args)
    def enableBackgroundWrite(self, *args): return _yarp.Port_enableBackgroundWrite(self, *args)
    def isWriting(self): return _yarp.Port_isWriting(self)
    def setEnvelope(self, *args): return _yarp.Port_setEnvelope(self, *args)
    def getEnvelope(self, *args): return _yarp.Port_getEnvelope(self, *args)
    def getInputCount(self): return _yarp.Port_getInputCount(self)
    def getOutputCount(self): return _yarp.Port_getOutputCount(self)
    def getReport(self, *args): return _yarp.Port_getReport(self, *args)
    def setReporter(self, *args): return _yarp.Port_setReporter(self, *args)
    def setAdminMode(self, adminMode = True): return _yarp.Port_setAdminMode(self, adminMode)
    def setInputMode(self, *args): return _yarp.Port_setInputMode(self, *args)
    def setOutputMode(self, *args): return _yarp.Port_setOutputMode(self, *args)
    def setRpcMode(self, *args): return _yarp.Port_setRpcMode(self, *args)
    def setTimeout(self, *args): return _yarp.Port_setTimeout(self, *args)
    def setVerbosity(self, *args): return _yarp.Port_setVerbosity(self, *args)
    def getVerbosity(self): return _yarp.Port_getVerbosity(self)
    def write(self, *args): return _yarp.Port_write(self, *args)
    def reply(self, *args): return _yarp.Port_reply(self, *args)
Port_swigregister = _yarp.Port_swigregister
Port_swigregister(Port)

BOTTLE_TAG_INT = _yarp.BOTTLE_TAG_INT
BOTTLE_TAG_VOCAB = _yarp.BOTTLE_TAG_VOCAB
BOTTLE_TAG_DOUBLE = _yarp.BOTTLE_TAG_DOUBLE
BOTTLE_TAG_STRING = _yarp.BOTTLE_TAG_STRING
BOTTLE_TAG_BLOB = _yarp.BOTTLE_TAG_BLOB
BOTTLE_TAG_LIST = _yarp.BOTTLE_TAG_LIST
class Bottle(Portable,Searchable):
    __swig_setmethods__ = {}
    for _s in [Portable,Searchable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bottle, name, value)
    __swig_getmethods__ = {}
    for _s in [Portable,Searchable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bottle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_Bottle(*args)
        try: self.this.append(this)
        except: self.this = this
    def clear(self): return _yarp.Bottle_clear(self)
    def addInt(self, *args): return _yarp.Bottle_addInt(self, *args)
    def addVocab(self, *args): return _yarp.Bottle_addVocab(self, *args)
    def addDouble(self, *args): return _yarp.Bottle_addDouble(self, *args)
    def addString(self, *args): return _yarp.Bottle_addString(self, *args)
    def add(self, *args): return _yarp.Bottle_add(self, *args)
    def addList(self): return _yarp.Bottle_addList(self)
    def pop(self): return _yarp.Bottle_pop(self)
    def get(self, *args): return _yarp.Bottle_get(self, *args)
    def size(self): return _yarp.Bottle_size(self)
    def fromString(self, *args): return _yarp.Bottle_fromString(self, *args)
    def fromBinary(self, *args): return _yarp.Bottle_fromBinary(self, *args)
    def toBinary(self, size = None): return _yarp.Bottle_toBinary(self, size)
    def toString_c(self): return _yarp.Bottle_toString_c(self)
    def write(self, *args): return _yarp.Bottle_write(self, *args)
    def read(self, *args): return _yarp.Bottle_read(self, *args)
    def onCommencement(self): return _yarp.Bottle_onCommencement(self)
    def check(self, *args): return _yarp.Bottle_check(self, *args)
    def find(self, *args): return _yarp.Bottle_find(self, *args)
    def findGroup(self, *args): return _yarp.Bottle_findGroup(self, *args)
    __swig_destroy__ = _yarp.delete_Bottle
    __del__ = lambda self : None;
    def copy(self, *args): return _yarp.Bottle_copy(self, *args)
    __swig_getmethods__["getNullBottle"] = lambda x: _yarp.Bottle_getNullBottle
    if _newclass:getNullBottle = staticmethod(_yarp.Bottle_getNullBottle)
    def isEqual(self, *args): return _yarp.Bottle_isEqual(self, *args)
    def notEqual(self, *args): return _yarp.Bottle_notEqual(self, *args)
    def append(self, *args): return _yarp.Bottle_append(self, *args)
    def tail(self): return _yarp.Bottle_tail(self)
    def specialize(self, *args): return _yarp.Bottle_specialize(self, *args)
    def getSpecialization(self): return _yarp.Bottle_getSpecialization(self)
    def setNested(self, *args): return _yarp.Bottle_setNested(self, *args)
    def hasChanged(self): return _yarp.Bottle_hasChanged(self)
    def toString(self): return _yarp.Bottle_toString(self)
Bottle_swigregister = _yarp.Bottle_swigregister
Bottle_swigregister(Bottle)

def Bottle_getNullBottle():
  return _yarp.Bottle_getNullBottle()
Bottle_getNullBottle = _yarp.Bottle_getNullBottle


def typedReaderMissingCallback():
  return _yarp.typedReaderMissingCallback()
typedReaderMissingCallback = _yarp.typedReaderMissingCallback
class PortReaderBufferBaseCreator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortReaderBufferBaseCreator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortReaderBufferBaseCreator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_PortReaderBufferBaseCreator
    __del__ = lambda self : None;
    def create(self): return _yarp.PortReaderBufferBaseCreator_create(self)
PortReaderBufferBaseCreator_swigregister = _yarp.PortReaderBufferBaseCreator_swigregister
PortReaderBufferBaseCreator_swigregister(PortReaderBufferBaseCreator)

class PortReaderBufferBase(PortReader):
    __swig_setmethods__ = {}
    for _s in [PortReader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortReaderBufferBase, name, value)
    __swig_getmethods__ = {}
    for _s in [PortReader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PortReaderBufferBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_PortReaderBufferBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def setCreator(self, *args): return _yarp.PortReaderBufferBase_setCreator(self, *args)
    def setReplier(self, *args): return _yarp.PortReaderBufferBase_setReplier(self, *args)
    __swig_destroy__ = _yarp.delete_PortReaderBufferBase
    __del__ = lambda self : None;
    def create(self): return _yarp.PortReaderBufferBase_create(self)
    def check(self): return _yarp.PortReaderBufferBase_check(self)
    def read(self, *args): return _yarp.PortReaderBufferBase_read(self, *args)
    def setAutoRelease(self, flag = True): return _yarp.PortReaderBufferBase_setAutoRelease(self, flag)
    def setPrune(self, flag = True): return _yarp.PortReaderBufferBase_setPrune(self, flag)
    def setAllowReuse(self, flag = True): return _yarp.PortReaderBufferBase_setAllowReuse(self, flag)
    def readBase(self): return _yarp.PortReaderBufferBase_readBase(self)
    def interrupt(self): return _yarp.PortReaderBufferBase_interrupt(self)
    def getMaxBuffer(self): return _yarp.PortReaderBufferBase_getMaxBuffer(self)
    def attachBase(self, *args): return _yarp.PortReaderBufferBase_attachBase(self, *args)
    def isClosed(self): return _yarp.PortReaderBufferBase_isClosed(self)
    def getName(self): return _yarp.PortReaderBufferBase_getName(self)
    def acceptObjectBase(self, *args): return _yarp.PortReaderBufferBase_acceptObjectBase(self, *args)
    def forgetObjectBase(self, *args): return _yarp.PortReaderBufferBase_forgetObjectBase(self, *args)
    def getEnvelope(self, *args): return _yarp.PortReaderBufferBase_getEnvelope(self, *args)
    def acquire(self): return _yarp.PortReaderBufferBase_acquire(self)
    def release(self, *args): return _yarp.PortReaderBufferBase_release(self, *args)
PortReaderBufferBase_swigregister = _yarp.PortReaderBufferBase_swigregister
PortReaderBufferBase_swigregister(PortReaderBufferBase)

class PortWriterBufferManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortWriterBufferManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortWriterBufferManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_PortWriterBufferManager
    __del__ = lambda self : None;
    def onCompletion(self, *args): return _yarp.PortWriterBufferManager_onCompletion(self, *args)
PortWriterBufferManager_swigregister = _yarp.PortWriterBufferManager_swigregister
PortWriterBufferManager_swigregister(PortWriterBufferManager)

class PortWriterWrapper(PortWriter):
    __swig_setmethods__ = {}
    for _s in [PortWriter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortWriterWrapper, name, value)
    __swig_getmethods__ = {}
    for _s in [PortWriter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PortWriterWrapper, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getInternal(self): return _yarp.PortWriterWrapper_getInternal(self)
    __swig_destroy__ = _yarp.delete_PortWriterWrapper
    __del__ = lambda self : None;
PortWriterWrapper_swigregister = _yarp.PortWriterWrapper_swigregister
PortWriterWrapper_swigregister(PortWriterWrapper)

class PortWriterBufferBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortWriterBufferBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortWriterBufferBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_PortWriterBufferBase
    __del__ = lambda self : None;
    def create(self, *args): return _yarp.PortWriterBufferBase_create(self, *args)
    def getContent(self): return _yarp.PortWriterBufferBase_getContent(self)
    def releaseContent(self): return _yarp.PortWriterBufferBase_releaseContent(self)
    def getCount(self): return _yarp.PortWriterBufferBase_getCount(self)
    def attach(self, *args): return _yarp.PortWriterBufferBase_attach(self, *args)
    def write(self, *args): return _yarp.PortWriterBufferBase_write(self, *args)
PortWriterBufferBase_swigregister = _yarp.PortWriterBufferBase_swigregister
PortWriterBufferBase_swigregister(PortWriterBufferBase)

class Random(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Random, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Random, name)
    __repr__ = _swig_repr
    __swig_getmethods__["seed_c"] = lambda x: _yarp.Random_seed_c
    if _newclass:seed_c = staticmethod(_yarp.Random_seed_c)
    __swig_getmethods__["normal"] = lambda x: _yarp.Random_normal
    if _newclass:normal = staticmethod(_yarp.Random_normal)
    __swig_getmethods__["uniform"] = lambda x: _yarp.Random_uniform
    if _newclass:uniform = staticmethod(_yarp.Random_uniform)
    def __init__(self): 
        this = _yarp.new_Random()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_Random
    __del__ = lambda self : None;
Random_swigregister = _yarp.Random_swigregister
Random_swigregister(Random)

def Random_seed_c(*args):
  return _yarp.Random_seed_c(*args)
Random_seed_c = _yarp.Random_seed_c

def Random_normal(*args):
  return _yarp.Random_normal(*args)
Random_normal = _yarp.Random_normal

def Random_uniform(*args):
  return _yarp.Random_uniform(*args)
Random_uniform = _yarp.Random_uniform

class Semaphore(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Semaphore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Semaphore, name)
    __repr__ = _swig_repr
    def __init__(self, initialCount = 1): 
        this = _yarp.new_Semaphore(initialCount)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_Semaphore
    __del__ = lambda self : None;
    def wait(self): return _yarp.Semaphore_wait(self)
    def check(self): return _yarp.Semaphore_check(self)
    def post(self): return _yarp.Semaphore_post(self)
Semaphore_swigregister = _yarp.Semaphore_swigregister
Semaphore_swigregister(Semaphore)

class Thread(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Thread, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_Thread
    __del__ = lambda self : None;
    def run(self): return _yarp.Thread_run(self)
    def onStop(self): return _yarp.Thread_onStop(self)
    def start(self): return _yarp.Thread_start(self)
    def stop(self): return _yarp.Thread_stop(self)
    def beforeStart(self): return _yarp.Thread_beforeStart(self)
    def afterStart(self, *args): return _yarp.Thread_afterStart(self, *args)
    def threadInit(self): return _yarp.Thread_threadInit(self)
    def threadRelease(self): return _yarp.Thread_threadRelease(self)
    def isStopping(self): return _yarp.Thread_isStopping(self)
    def isRunning(self): return _yarp.Thread_isRunning(self)
    def setOptions(self, stackSize = 0): return _yarp.Thread_setOptions(self, stackSize)
    __swig_getmethods__["getCount"] = lambda x: _yarp.Thread_getCount
    if _newclass:getCount = staticmethod(_yarp.Thread_getCount)
    def getKey(self): return _yarp.Thread_getKey(self)
    def setPriority(self, *args): return _yarp.Thread_setPriority(self, *args)
    def getPriority(self): return _yarp.Thread_getPriority(self)
    __swig_getmethods__["setDefaultStackSize"] = lambda x: _yarp.Thread_setDefaultStackSize
    if _newclass:setDefaultStackSize = staticmethod(_yarp.Thread_setDefaultStackSize)
Thread_swigregister = _yarp.Thread_swigregister
Thread_swigregister(Thread)

def Thread_getCount():
  return _yarp.Thread_getCount()
Thread_getCount = _yarp.Thread_getCount

def Thread_setDefaultStackSize(*args):
  return _yarp.Thread_setDefaultStackSize(*args)
Thread_setDefaultStackSize = _yarp.Thread_setDefaultStackSize

class Time(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Time, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Time, name)
    __repr__ = _swig_repr
    __swig_getmethods__["delay"] = lambda x: _yarp.Time_delay
    if _newclass:delay = staticmethod(_yarp.Time_delay)
    __swig_getmethods__["now"] = lambda x: _yarp.Time_now
    if _newclass:now = staticmethod(_yarp.Time_now)
    __swig_getmethods__["yield_c"] = lambda x: _yarp.Time_yield_c
    if _newclass:yield_c = staticmethod(_yarp.Time_yield_c)
    __swig_getmethods__["turboBoost"] = lambda x: _yarp.Time_turboBoost
    if _newclass:turboBoost = staticmethod(_yarp.Time_turboBoost)
    def __init__(self): 
        this = _yarp.new_Time()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_Time
    __del__ = lambda self : None;
Time_swigregister = _yarp.Time_swigregister
Time_swigregister(Time)

def Time_delay(*args):
  return _yarp.Time_delay(*args)
Time_delay = _yarp.Time_delay

def Time_now():
  return _yarp.Time_now()
Time_now = _yarp.Time_now

def Time_yield_c():
  return _yarp.Time_yield_c()
Time_yield_c = _yarp.Time_yield_c

def Time_turboBoost():
  return _yarp.Time_turboBoost()
Time_turboBoost = _yarp.Time_turboBoost

class TypedReaderProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderProperty, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setStrict(self, strict = True): return _yarp.TypedReaderProperty_setStrict(self, strict)
    def read(self, shouldWait = True): return _yarp.TypedReaderProperty_read(self, shouldWait)
    def interrupt(self): return _yarp.TypedReaderProperty_interrupt(self)
    def lastRead(self): return _yarp.TypedReaderProperty_lastRead(self)
    def isClosed(self): return _yarp.TypedReaderProperty_isClosed(self)
    def useCallback(self, *args): return _yarp.TypedReaderProperty_useCallback(self, *args)
    def disableCallback(self): return _yarp.TypedReaderProperty_disableCallback(self)
    def getPendingReads(self): return _yarp.TypedReaderProperty_getPendingReads(self)
    __swig_destroy__ = _yarp.delete_TypedReaderProperty
    __del__ = lambda self : None;
    def getName(self): return _yarp.TypedReaderProperty_getName(self)
    def setReplier(self, *args): return _yarp.TypedReaderProperty_setReplier(self, *args)
    def acquire(self): return _yarp.TypedReaderProperty_acquire(self)
    def release(self, *args): return _yarp.TypedReaderProperty_release(self, *args)
TypedReaderProperty_swigregister = _yarp.TypedReaderProperty_swigregister
TypedReaderProperty_swigregister(TypedReaderProperty)

class PropertyCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyCallback, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_PropertyCallback
    __del__ = lambda self : None;
    def onRead(self, *args): return _yarp.PropertyCallback_onRead(self, *args)
    def __init__(self): 
        if self.__class__ == PropertyCallback:
            _self = None
        else:
            _self = self
        this = _yarp.new_PropertyCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _yarp.disown_PropertyCallback(self)
        return weakref_proxy(self)
PropertyCallback_swigregister = _yarp.PropertyCallback_swigregister
PropertyCallback_swigregister(PropertyCallback)

class BufferedPortProperty(Contactable,TypedReaderProperty,PropertyCallback):
    __swig_setmethods__ = {}
    for _s in [Contactable,TypedReaderProperty,PropertyCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferedPortProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [Contactable,TypedReaderProperty,PropertyCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BufferedPortProperty, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _yarp.new_BufferedPortProperty()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_BufferedPortProperty
    __del__ = lambda self : None;
    def addOutput(self, *args): return _yarp.BufferedPortProperty_addOutput(self, *args)
    def close(self): return _yarp.BufferedPortProperty_close(self)
    def interrupt(self): return _yarp.BufferedPortProperty_interrupt(self)
    def getPendingReads(self): return _yarp.BufferedPortProperty_getPendingReads(self)
    def where(self): return _yarp.BufferedPortProperty_where(self)
    def getName(self): return _yarp.BufferedPortProperty_getName(self)
    def prepare(self): return _yarp.BufferedPortProperty_prepare(self)
    def unprepare(self): return _yarp.BufferedPortProperty_unprepare(self)
    def write(self, forceStrict = False): return _yarp.BufferedPortProperty_write(self, forceStrict)
    def writeStrict(self): return _yarp.BufferedPortProperty_writeStrict(self)
    def setStrict(self, strict = True): return _yarp.BufferedPortProperty_setStrict(self, strict)
    def read(self, shouldWait = True): return _yarp.BufferedPortProperty_read(self, shouldWait)
    def lastRead(self): return _yarp.BufferedPortProperty_lastRead(self)
    def isClosed(self): return _yarp.BufferedPortProperty_isClosed(self)
    def setReplier(self, *args): return _yarp.BufferedPortProperty_setReplier(self, *args)
    def onRead(self, *args): return _yarp.BufferedPortProperty_onRead(self, *args)
    def useCallback(self, *args): return _yarp.BufferedPortProperty_useCallback(self, *args)
    def disableCallback(self): return _yarp.BufferedPortProperty_disableCallback(self)
    def setEnvelope(self, *args): return _yarp.BufferedPortProperty_setEnvelope(self, *args)
    def getEnvelope(self, *args): return _yarp.BufferedPortProperty_getEnvelope(self, *args)
    def getInputCount(self): return _yarp.BufferedPortProperty_getInputCount(self)
    def getOutputCount(self): return _yarp.BufferedPortProperty_getOutputCount(self)
    def isWriting(self): return _yarp.BufferedPortProperty_isWriting(self)
    def getReport(self, *args): return _yarp.BufferedPortProperty_getReport(self, *args)
    def setReporter(self, *args): return _yarp.BufferedPortProperty_setReporter(self, *args)
    def acquire(self): return _yarp.BufferedPortProperty_acquire(self)
    def release(self, *args): return _yarp.BufferedPortProperty_release(self, *args)
BufferedPortProperty_swigregister = _yarp.BufferedPortProperty_swigregister
BufferedPortProperty_swigregister(BufferedPortProperty)

class TypedReaderBottle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderBottle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderBottle, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setStrict(self, strict = True): return _yarp.TypedReaderBottle_setStrict(self, strict)
    def read(self, shouldWait = True): return _yarp.TypedReaderBottle_read(self, shouldWait)
    def interrupt(self): return _yarp.TypedReaderBottle_interrupt(self)
    def lastRead(self): return _yarp.TypedReaderBottle_lastRead(self)
    def isClosed(self): return _yarp.TypedReaderBottle_isClosed(self)
    def useCallback(self, *args): return _yarp.TypedReaderBottle_useCallback(self, *args)
    def disableCallback(self): return _yarp.TypedReaderBottle_disableCallback(self)
    def getPendingReads(self): return _yarp.TypedReaderBottle_getPendingReads(self)
    __swig_destroy__ = _yarp.delete_TypedReaderBottle
    __del__ = lambda self : None;
    def getName(self): return _yarp.TypedReaderBottle_getName(self)
    def setReplier(self, *args): return _yarp.TypedReaderBottle_setReplier(self, *args)
    def acquire(self): return _yarp.TypedReaderBottle_acquire(self)
    def release(self, *args): return _yarp.TypedReaderBottle_release(self, *args)
TypedReaderBottle_swigregister = _yarp.TypedReaderBottle_swigregister
TypedReaderBottle_swigregister(TypedReaderBottle)

class BottleCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BottleCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BottleCallback, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_BottleCallback
    __del__ = lambda self : None;
    def onRead(self, *args): return _yarp.BottleCallback_onRead(self, *args)
    def __init__(self): 
        if self.__class__ == BottleCallback:
            _self = None
        else:
            _self = self
        this = _yarp.new_BottleCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _yarp.disown_BottleCallback(self)
        return weakref_proxy(self)
BottleCallback_swigregister = _yarp.BottleCallback_swigregister
BottleCallback_swigregister(BottleCallback)

class BufferedPortBottle(Contactable,TypedReaderBottle,BottleCallback):
    __swig_setmethods__ = {}
    for _s in [Contactable,TypedReaderBottle,BottleCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferedPortBottle, name, value)
    __swig_getmethods__ = {}
    for _s in [Contactable,TypedReaderBottle,BottleCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BufferedPortBottle, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _yarp.new_BufferedPortBottle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_BufferedPortBottle
    __del__ = lambda self : None;
    def addOutput(self, *args): return _yarp.BufferedPortBottle_addOutput(self, *args)
    def close(self): return _yarp.BufferedPortBottle_close(self)
    def interrupt(self): return _yarp.BufferedPortBottle_interrupt(self)
    def getPendingReads(self): return _yarp.BufferedPortBottle_getPendingReads(self)
    def where(self): return _yarp.BufferedPortBottle_where(self)
    def getName(self): return _yarp.BufferedPortBottle_getName(self)
    def prepare(self): return _yarp.BufferedPortBottle_prepare(self)
    def unprepare(self): return _yarp.BufferedPortBottle_unprepare(self)
    def write(self, forceStrict = False): return _yarp.BufferedPortBottle_write(self, forceStrict)
    def writeStrict(self): return _yarp.BufferedPortBottle_writeStrict(self)
    def setStrict(self, strict = True): return _yarp.BufferedPortBottle_setStrict(self, strict)
    def read(self, shouldWait = True): return _yarp.BufferedPortBottle_read(self, shouldWait)
    def lastRead(self): return _yarp.BufferedPortBottle_lastRead(self)
    def isClosed(self): return _yarp.BufferedPortBottle_isClosed(self)
    def setReplier(self, *args): return _yarp.BufferedPortBottle_setReplier(self, *args)
    def onRead(self, *args): return _yarp.BufferedPortBottle_onRead(self, *args)
    def useCallback(self, *args): return _yarp.BufferedPortBottle_useCallback(self, *args)
    def disableCallback(self): return _yarp.BufferedPortBottle_disableCallback(self)
    def setEnvelope(self, *args): return _yarp.BufferedPortBottle_setEnvelope(self, *args)
    def getEnvelope(self, *args): return _yarp.BufferedPortBottle_getEnvelope(self, *args)
    def getInputCount(self): return _yarp.BufferedPortBottle_getInputCount(self)
    def getOutputCount(self): return _yarp.BufferedPortBottle_getOutputCount(self)
    def isWriting(self): return _yarp.BufferedPortBottle_isWriting(self)
    def getReport(self, *args): return _yarp.BufferedPortBottle_getReport(self, *args)
    def setReporter(self, *args): return _yarp.BufferedPortBottle_setReporter(self, *args)
    def acquire(self): return _yarp.BufferedPortBottle_acquire(self)
    def release(self, *args): return _yarp.BufferedPortBottle_release(self, *args)
BufferedPortBottle_swigregister = _yarp.BufferedPortBottle_swigregister
BufferedPortBottle_swigregister(BufferedPortBottle)


def PAD_BYTES(*args):
  return _yarp.PAD_BYTES(*args)
PAD_BYTES = _yarp.PAD_BYTES
class Image(Portable):
    __swig_setmethods__ = {}
    for _s in [Portable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    for _s in [Portable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_Image(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_Image
    __del__ = lambda self : None;
    def copy(self, *args): return _yarp.Image_copy(self, *args)
    def width(self): return _yarp.Image_width(self)
    def height(self): return _yarp.Image_height(self)
    def getPixelSize(self): return _yarp.Image_getPixelSize(self)
    def getPixelCode(self): return _yarp.Image_getPixelCode(self)
    def getRowSize(self): return _yarp.Image_getRowSize(self)
    def getQuantum(self): return _yarp.Image_getQuantum(self)
    def getPadding(self): return _yarp.Image_getPadding(self)
    def getRow(self, *args): return _yarp.Image_getRow(self, *args)
    def getPixelAddress(self, *args): return _yarp.Image_getPixelAddress(self, *args)
    def isPixel(self, *args): return _yarp.Image_isPixel(self, *args)
    def zero(self): return _yarp.Image_zero(self)
    def resize(self, *args): return _yarp.Image_resize(self, *args)
    def getRawImage(self): return _yarp.Image_getRawImage(self)
    def getRawImageSize(self): return _yarp.Image_getRawImageSize(self)
    def getIplImage(self): return _yarp.Image_getIplImage(self)
    def wrapIplImage(self, *args): return _yarp.Image_wrapIplImage(self, *args)
    def read(self, *args): return _yarp.Image_read(self, *args)
    def write(self, *args): return _yarp.Image_write(self, *args)
    def setQuantum(self, *args): return _yarp.Image_setQuantum(self, *args)
    def topIsLowIndex(self): return _yarp.Image_topIsLowIndex(self)
    def setTopIsLowIndex(self, *args): return _yarp.Image_setTopIsLowIndex(self, *args)
    def getRowArray(self): return _yarp.Image_getRowArray(self)
    def setExternal(self, *args): return _yarp.Image_setExternal(self, *args)
Image_swigregister = _yarp.Image_swigregister
Image_swigregister(Image)

class FlexImage(Image):
    __swig_setmethods__ = {}
    for _s in [Image]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlexImage, name, value)
    __swig_getmethods__ = {}
    for _s in [Image]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FlexImage, name)
    __repr__ = _swig_repr
    def setPixelCode(self, *args): return _yarp.FlexImage_setPixelCode(self, *args)
    def setPixelSize(self, *args): return _yarp.FlexImage_setPixelSize(self, *args)
    def setQuantum(self, *args): return _yarp.FlexImage_setQuantum(self, *args)
    def __init__(self): 
        this = _yarp.new_FlexImage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_FlexImage
    __del__ = lambda self : None;
FlexImage_swigregister = _yarp.FlexImage_swigregister
FlexImage_swigregister(FlexImage)

VOCAB_PIXEL_INVALID = _yarp.VOCAB_PIXEL_INVALID
VOCAB_PIXEL_MONO = _yarp.VOCAB_PIXEL_MONO
VOCAB_PIXEL_MONO16 = _yarp.VOCAB_PIXEL_MONO16
VOCAB_PIXEL_RGB = _yarp.VOCAB_PIXEL_RGB
VOCAB_PIXEL_RGBA = _yarp.VOCAB_PIXEL_RGBA
VOCAB_PIXEL_BGRA = _yarp.VOCAB_PIXEL_BGRA
VOCAB_PIXEL_INT = _yarp.VOCAB_PIXEL_INT
VOCAB_PIXEL_HSV = _yarp.VOCAB_PIXEL_HSV
VOCAB_PIXEL_BGR = _yarp.VOCAB_PIXEL_BGR
VOCAB_PIXEL_MONO_SIGNED = _yarp.VOCAB_PIXEL_MONO_SIGNED
VOCAB_PIXEL_RGB_SIGNED = _yarp.VOCAB_PIXEL_RGB_SIGNED
VOCAB_PIXEL_RGB_INT = _yarp.VOCAB_PIXEL_RGB_INT
VOCAB_PIXEL_MONO_FLOAT = _yarp.VOCAB_PIXEL_MONO_FLOAT
VOCAB_PIXEL_RGB_FLOAT = _yarp.VOCAB_PIXEL_RGB_FLOAT
VOCAB_PIXEL_HSV_FLOAT = _yarp.VOCAB_PIXEL_HSV_FLOAT
class PixelRgb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelRgb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelRgb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _yarp.PixelRgb_r_set
    __swig_getmethods__["r"] = _yarp.PixelRgb_r_get
    if _newclass:r = _swig_property(_yarp.PixelRgb_r_get, _yarp.PixelRgb_r_set)
    __swig_setmethods__["g"] = _yarp.PixelRgb_g_set
    __swig_getmethods__["g"] = _yarp.PixelRgb_g_get
    if _newclass:g = _swig_property(_yarp.PixelRgb_g_get, _yarp.PixelRgb_g_set)
    __swig_setmethods__["b"] = _yarp.PixelRgb_b_set
    __swig_getmethods__["b"] = _yarp.PixelRgb_b_get
    if _newclass:b = _swig_property(_yarp.PixelRgb_b_get, _yarp.PixelRgb_b_set)
    def __init__(self, *args): 
        this = _yarp.new_PixelRgb(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_PixelRgb
    __del__ = lambda self : None;
PixelRgb_swigregister = _yarp.PixelRgb_swigregister
PixelRgb_swigregister(PixelRgb)

class PixelRgba(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelRgba, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelRgba, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _yarp.PixelRgba_r_set
    __swig_getmethods__["r"] = _yarp.PixelRgba_r_get
    if _newclass:r = _swig_property(_yarp.PixelRgba_r_get, _yarp.PixelRgba_r_set)
    __swig_setmethods__["g"] = _yarp.PixelRgba_g_set
    __swig_getmethods__["g"] = _yarp.PixelRgba_g_get
    if _newclass:g = _swig_property(_yarp.PixelRgba_g_get, _yarp.PixelRgba_g_set)
    __swig_setmethods__["b"] = _yarp.PixelRgba_b_set
    __swig_getmethods__["b"] = _yarp.PixelRgba_b_get
    if _newclass:b = _swig_property(_yarp.PixelRgba_b_get, _yarp.PixelRgba_b_set)
    __swig_setmethods__["a"] = _yarp.PixelRgba_a_set
    __swig_getmethods__["a"] = _yarp.PixelRgba_a_get
    if _newclass:a = _swig_property(_yarp.PixelRgba_a_get, _yarp.PixelRgba_a_set)
    def __init__(self, *args): 
        this = _yarp.new_PixelRgba(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_PixelRgba
    __del__ = lambda self : None;
PixelRgba_swigregister = _yarp.PixelRgba_swigregister
PixelRgba_swigregister(PixelRgba)

class PixelBgra(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelBgra, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelBgra, name)
    __repr__ = _swig_repr
    __swig_setmethods__["b"] = _yarp.PixelBgra_b_set
    __swig_getmethods__["b"] = _yarp.PixelBgra_b_get
    if _newclass:b = _swig_property(_yarp.PixelBgra_b_get, _yarp.PixelBgra_b_set)
    __swig_setmethods__["g"] = _yarp.PixelBgra_g_set
    __swig_getmethods__["g"] = _yarp.PixelBgra_g_get
    if _newclass:g = _swig_property(_yarp.PixelBgra_g_get, _yarp.PixelBgra_g_set)
    __swig_setmethods__["r"] = _yarp.PixelBgra_r_set
    __swig_getmethods__["r"] = _yarp.PixelBgra_r_get
    if _newclass:r = _swig_property(_yarp.PixelBgra_r_get, _yarp.PixelBgra_r_set)
    __swig_setmethods__["a"] = _yarp.PixelBgra_a_set
    __swig_getmethods__["a"] = _yarp.PixelBgra_a_get
    if _newclass:a = _swig_property(_yarp.PixelBgra_a_get, _yarp.PixelBgra_a_set)
    def __init__(self, *args): 
        this = _yarp.new_PixelBgra(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_PixelBgra
    __del__ = lambda self : None;
PixelBgra_swigregister = _yarp.PixelBgra_swigregister
PixelBgra_swigregister(PixelBgra)

class PixelBgr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelBgr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelBgr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["b"] = _yarp.PixelBgr_b_set
    __swig_getmethods__["b"] = _yarp.PixelBgr_b_get
    if _newclass:b = _swig_property(_yarp.PixelBgr_b_get, _yarp.PixelBgr_b_set)
    __swig_setmethods__["g"] = _yarp.PixelBgr_g_set
    __swig_getmethods__["g"] = _yarp.PixelBgr_g_get
    if _newclass:g = _swig_property(_yarp.PixelBgr_g_get, _yarp.PixelBgr_g_set)
    __swig_setmethods__["r"] = _yarp.PixelBgr_r_set
    __swig_getmethods__["r"] = _yarp.PixelBgr_r_get
    if _newclass:r = _swig_property(_yarp.PixelBgr_r_get, _yarp.PixelBgr_r_set)
    def __init__(self, *args): 
        this = _yarp.new_PixelBgr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_PixelBgr
    __del__ = lambda self : None;
PixelBgr_swigregister = _yarp.PixelBgr_swigregister
PixelBgr_swigregister(PixelBgr)

class PixelHsv(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelHsv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelHsv, name)
    __repr__ = _swig_repr
    __swig_setmethods__["h"] = _yarp.PixelHsv_h_set
    __swig_getmethods__["h"] = _yarp.PixelHsv_h_get
    if _newclass:h = _swig_property(_yarp.PixelHsv_h_get, _yarp.PixelHsv_h_set)
    __swig_setmethods__["s"] = _yarp.PixelHsv_s_set
    __swig_getmethods__["s"] = _yarp.PixelHsv_s_get
    if _newclass:s = _swig_property(_yarp.PixelHsv_s_get, _yarp.PixelHsv_s_set)
    __swig_setmethods__["v"] = _yarp.PixelHsv_v_set
    __swig_getmethods__["v"] = _yarp.PixelHsv_v_get
    if _newclass:v = _swig_property(_yarp.PixelHsv_v_get, _yarp.PixelHsv_v_set)
    def __init__(self): 
        this = _yarp.new_PixelHsv()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_PixelHsv
    __del__ = lambda self : None;
PixelHsv_swigregister = _yarp.PixelHsv_swigregister
PixelHsv_swigregister(PixelHsv)

class PixelRgbSigned(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelRgbSigned, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelRgbSigned, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _yarp.PixelRgbSigned_r_set
    __swig_getmethods__["r"] = _yarp.PixelRgbSigned_r_get
    if _newclass:r = _swig_property(_yarp.PixelRgbSigned_r_get, _yarp.PixelRgbSigned_r_set)
    __swig_setmethods__["g"] = _yarp.PixelRgbSigned_g_set
    __swig_getmethods__["g"] = _yarp.PixelRgbSigned_g_get
    if _newclass:g = _swig_property(_yarp.PixelRgbSigned_g_get, _yarp.PixelRgbSigned_g_set)
    __swig_setmethods__["b"] = _yarp.PixelRgbSigned_b_set
    __swig_getmethods__["b"] = _yarp.PixelRgbSigned_b_get
    if _newclass:b = _swig_property(_yarp.PixelRgbSigned_b_get, _yarp.PixelRgbSigned_b_set)
    def __init__(self): 
        this = _yarp.new_PixelRgbSigned()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_PixelRgbSigned
    __del__ = lambda self : None;
PixelRgbSigned_swigregister = _yarp.PixelRgbSigned_swigregister
PixelRgbSigned_swigregister(PixelRgbSigned)

class PixelRgbFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelRgbFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelRgbFloat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _yarp.PixelRgbFloat_r_set
    __swig_getmethods__["r"] = _yarp.PixelRgbFloat_r_get
    if _newclass:r = _swig_property(_yarp.PixelRgbFloat_r_get, _yarp.PixelRgbFloat_r_set)
    __swig_setmethods__["g"] = _yarp.PixelRgbFloat_g_set
    __swig_getmethods__["g"] = _yarp.PixelRgbFloat_g_get
    if _newclass:g = _swig_property(_yarp.PixelRgbFloat_g_get, _yarp.PixelRgbFloat_g_set)
    __swig_setmethods__["b"] = _yarp.PixelRgbFloat_b_set
    __swig_getmethods__["b"] = _yarp.PixelRgbFloat_b_get
    if _newclass:b = _swig_property(_yarp.PixelRgbFloat_b_get, _yarp.PixelRgbFloat_b_set)
    def __init__(self): 
        this = _yarp.new_PixelRgbFloat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_PixelRgbFloat
    __del__ = lambda self : None;
PixelRgbFloat_swigregister = _yarp.PixelRgbFloat_swigregister
PixelRgbFloat_swigregister(PixelRgbFloat)

class PixelRgbInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelRgbInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelRgbInt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _yarp.PixelRgbInt_r_set
    __swig_getmethods__["r"] = _yarp.PixelRgbInt_r_get
    if _newclass:r = _swig_property(_yarp.PixelRgbInt_r_get, _yarp.PixelRgbInt_r_set)
    __swig_setmethods__["g"] = _yarp.PixelRgbInt_g_set
    __swig_getmethods__["g"] = _yarp.PixelRgbInt_g_get
    if _newclass:g = _swig_property(_yarp.PixelRgbInt_g_get, _yarp.PixelRgbInt_g_set)
    __swig_setmethods__["b"] = _yarp.PixelRgbInt_b_set
    __swig_getmethods__["b"] = _yarp.PixelRgbInt_b_get
    if _newclass:b = _swig_property(_yarp.PixelRgbInt_b_get, _yarp.PixelRgbInt_b_set)
    def __init__(self, *args): 
        this = _yarp.new_PixelRgbInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_PixelRgbInt
    __del__ = lambda self : None;
PixelRgbInt_swigregister = _yarp.PixelRgbInt_swigregister
PixelRgbInt_swigregister(PixelRgbInt)

class PixelHsvFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelHsvFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelHsvFloat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["h"] = _yarp.PixelHsvFloat_h_set
    __swig_getmethods__["h"] = _yarp.PixelHsvFloat_h_get
    if _newclass:h = _swig_property(_yarp.PixelHsvFloat_h_get, _yarp.PixelHsvFloat_h_set)
    __swig_setmethods__["s"] = _yarp.PixelHsvFloat_s_set
    __swig_getmethods__["s"] = _yarp.PixelHsvFloat_s_get
    if _newclass:s = _swig_property(_yarp.PixelHsvFloat_s_get, _yarp.PixelHsvFloat_s_set)
    __swig_setmethods__["v"] = _yarp.PixelHsvFloat_v_set
    __swig_getmethods__["v"] = _yarp.PixelHsvFloat_v_get
    if _newclass:v = _swig_property(_yarp.PixelHsvFloat_v_get, _yarp.PixelHsvFloat_v_set)
    def __init__(self): 
        this = _yarp.new_PixelHsvFloat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_PixelHsvFloat
    __del__ = lambda self : None;
PixelHsvFloat_swigregister = _yarp.PixelHsvFloat_swigregister
PixelHsvFloat_swigregister(PixelHsvFloat)

FORMAT_NULL = _yarp.FORMAT_NULL
FORMAT_ANY = _yarp.FORMAT_ANY
FORMAT_PGM = _yarp.FORMAT_PGM
FORMAT_PPM = _yarp.FORMAT_PPM
FORMAT_NUMERIC = _yarp.FORMAT_NUMERIC
class Sound(Portable):
    __swig_setmethods__ = {}
    for _s in [Portable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sound, name, value)
    __swig_getmethods__ = {}
    for _s in [Portable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_Sound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_Sound
    __del__ = lambda self : None;
    def resize(self, *args): return _yarp.Sound_resize(self, *args)
    def get(self, *args): return _yarp.Sound_get(self, *args)
    def set(self, *args): return _yarp.Sound_set(self, *args)
    def getSafe(self, *args): return _yarp.Sound_getSafe(self, *args)
    def setSafe(self, *args): return _yarp.Sound_setSafe(self, *args)
    def isSample(self, *args): return _yarp.Sound_isSample(self, *args)
    def getFrequency(self): return _yarp.Sound_getFrequency(self)
    def setFrequency(self, *args): return _yarp.Sound_setFrequency(self, *args)
    def getBytesPerSample(self): return _yarp.Sound_getBytesPerSample(self)
    def getSamples(self): return _yarp.Sound_getSamples(self)
    def getChannels(self): return _yarp.Sound_getChannels(self)
    def read(self, *args): return _yarp.Sound_read(self, *args)
    def write(self, *args): return _yarp.Sound_write(self, *args)
    def getRawData(self): return _yarp.Sound_getRawData(self)
    def getRawDataSize(self): return _yarp.Sound_getRawDataSize(self)
Sound_swigregister = _yarp.Sound_swigregister
Sound_swigregister(Sound)

def read(*args):
  return _yarp.read(*args)
read = _yarp.read

def write(*args):
  return _yarp.write(*args)
write = _yarp.write

class VectorBase(Portable):
    __swig_setmethods__ = {}
    for _s in [Portable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Portable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getElementSize(self): return _yarp.VectorBase_getElementSize(self)
    def getListSize(self): return _yarp.VectorBase_getListSize(self)
    def getMemoryBlock(self): return _yarp.VectorBase_getMemoryBlock(self)
    def resize(self, *args): return _yarp.VectorBase_resize(self, *args)
    def read(self, *args): return _yarp.VectorBase_read(self, *args)
    def write(self, *args): return _yarp.VectorBase_write(self, *args)
    __swig_destroy__ = _yarp.delete_VectorBase
    __del__ = lambda self : None;
VectorBase_swigregister = _yarp.VectorBase_swigregister
VectorBase_swigregister(VectorBase)

class Vector(Portable):
    __swig_setmethods__ = {}
    for _s in [Portable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    for _s in [Portable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_Vector
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _yarp.new_Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def resize(self, *args): return _yarp.Vector_resize(self, *args)
    def size(self, *args): return _yarp.Vector_size(self, *args)
    def length(self): return _yarp.Vector_length(self)
    def zero(self): return _yarp.Vector_zero(self)
    def toString(self): return _yarp.Vector_toString(self)
    def subVector(self, *args): return _yarp.Vector_subVector(self, *args)
    def data(self, *args): return _yarp.Vector_data(self, *args)
    def isEqual(self, *args): return _yarp.Vector_isEqual(self, *args)
    def push_back(self, *args): return _yarp.Vector_push_back(self, *args)
    def pop_back(self): return _yarp.Vector_pop_back(self)
    def getGslVector(self, *args): return _yarp.Vector_getGslVector(self, *args)
    def access(self, *args): return _yarp.Vector_access(self, *args)
    def clear(self): return _yarp.Vector_clear(self)
    def read(self, *args): return _yarp.Vector_read(self, *args)
    def write(self, *args): return _yarp.Vector_write(self, *args)
    def get(self, *args): return _yarp.Vector_get(self, *args)
Vector_swigregister = _yarp.Vector_swigregister
Vector_swigregister(Vector)

class IConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IConfig, name)
    __repr__ = _swig_repr
    def open(self, *args): return _yarp.IConfig_open(self, *args)
    def close(self): return _yarp.IConfig_close(self)
    def configure(self, *args): return _yarp.IConfig_configure(self, *args)
    __swig_destroy__ = _yarp.delete_IConfig
    __del__ = lambda self : None;
    def __init__(self): 
        this = _yarp.new_IConfig()
        try: self.this.append(this)
        except: self.this = this
IConfig_swigregister = _yarp.IConfig_swigregister
IConfig_swigregister(IConfig)

class DeviceDriver(IConfig):
    __swig_setmethods__ = {}
    for _s in [IConfig]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [IConfig]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceDriver, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_DeviceDriver
    __del__ = lambda self : None;
    def open(self, *args): return _yarp.DeviceDriver_open(self, *args)
    def close(self): return _yarp.DeviceDriver_close(self)
    def __init__(self): 
        this = _yarp.new_DeviceDriver()
        try: self.this.append(this)
        except: self.this = this
DeviceDriver_swigregister = _yarp.DeviceDriver_swigregister
DeviceDriver_swigregister(DeviceDriver)

class DeviceResponder(PortReader,BottleCallback):
    __swig_setmethods__ = {}
    for _s in [PortReader,BottleCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceResponder, name, value)
    __swig_getmethods__ = {}
    for _s in [PortReader,BottleCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceResponder, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _yarp.new_DeviceResponder()
        try: self.this.append(this)
        except: self.this = this
    def addUsage(self, *args): return _yarp.DeviceResponder_addUsage(self, *args)
    def respond(self, *args): return _yarp.DeviceResponder_respond(self, *args)
    def read(self, *args): return _yarp.DeviceResponder_read(self, *args)
    def onRead(self, *args): return _yarp.DeviceResponder_onRead(self, *args)
    def makeUsage(self): return _yarp.DeviceResponder_makeUsage(self)
    def attach(self, *args): return _yarp.DeviceResponder_attach(self, *args)
    __swig_destroy__ = _yarp.delete_DeviceResponder
    __del__ = lambda self : None;
DeviceResponder_swigregister = _yarp.DeviceResponder_swigregister
DeviceResponder_swigregister(DeviceResponder)

class ChainedDriver(DeviceDriver):
    __swig_setmethods__ = {}
    for _s in [DeviceDriver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainedDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [DeviceDriver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainedDriver, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getTail(self): return _yarp.ChainedDriver_getTail(self)
    __swig_destroy__ = _yarp.delete_ChainedDriver
    __del__ = lambda self : None;
ChainedDriver_swigregister = _yarp.ChainedDriver_swigregister
ChainedDriver_swigregister(ChainedDriver)

class PolyDriver(DeviceDriver):
    __swig_setmethods__ = {}
    for _s in [DeviceDriver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolyDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [DeviceDriver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolyDriver, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yarp.new_PolyDriver(*args)
        try: self.this.append(this)
        except: self.this = this
    def open_str(self, *args): return _yarp.PolyDriver_open_str(self, *args)
    def open(self, *args): return _yarp.PolyDriver_open(self, *args)
    def link(self, *args): return _yarp.PolyDriver_link(self, *args)
    def take(self): return _yarp.PolyDriver_take(self)
    def give(self, *args): return _yarp.PolyDriver_give(self, *args)
    __swig_destroy__ = _yarp.delete_PolyDriver
    __del__ = lambda self : None;
    def close(self): return _yarp.PolyDriver_close(self)
    def isValid(self): return _yarp.PolyDriver_isValid(self)
    def getOptions(self): return _yarp.PolyDriver_getOptions(self)
    def getComment(self, *args): return _yarp.PolyDriver_getComment(self, *args)
    def getDefaultValue(self, *args): return _yarp.PolyDriver_getDefaultValue(self, *args)
    def getValue(self, *args): return _yarp.PolyDriver_getValue(self, *args)
    def viewFrameGrabberImage(self): return _yarp.PolyDriver_viewFrameGrabberImage(self)
    def viewIPositionControl(self): return _yarp.PolyDriver_viewIPositionControl(self)
    def viewIVelocityControl(self): return _yarp.PolyDriver_viewIVelocityControl(self)
    def viewIEncoders(self): return _yarp.PolyDriver_viewIEncoders(self)
    def viewIPidControl(self): return _yarp.PolyDriver_viewIPidControl(self)
    def viewIAmplifierControl(self): return _yarp.PolyDriver_viewIAmplifierControl(self)
    def viewIControlLimits(self): return _yarp.PolyDriver_viewIControlLimits(self)
    def viewICartesianControl(self): return _yarp.PolyDriver_viewICartesianControl(self)
PolyDriver_swigregister = _yarp.PolyDriver_swigregister
PolyDriver_swigregister(PolyDriver)

class IFrameGrabber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFrameGrabber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IFrameGrabber, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IFrameGrabber
    __del__ = lambda self : None;
    def getRawBuffer(self, *args): return _yarp.IFrameGrabber_getRawBuffer(self, *args)
    def getRawBufferSize(self): return _yarp.IFrameGrabber_getRawBufferSize(self)
    def height(self): return _yarp.IFrameGrabber_height(self)
    def width(self): return _yarp.IFrameGrabber_width(self)
IFrameGrabber_swigregister = _yarp.IFrameGrabber_swigregister
IFrameGrabber_swigregister(IFrameGrabber)

class IFrameGrabberRgb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFrameGrabberRgb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IFrameGrabberRgb, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IFrameGrabberRgb
    __del__ = lambda self : None;
    def getRgbBuffer(self, *args): return _yarp.IFrameGrabberRgb_getRgbBuffer(self, *args)
    def height(self): return _yarp.IFrameGrabberRgb_height(self)
    def width(self): return _yarp.IFrameGrabberRgb_width(self)
IFrameGrabberRgb_swigregister = _yarp.IFrameGrabberRgb_swigregister
IFrameGrabberRgb_swigregister(IFrameGrabberRgb)

class IFrameGrabberImage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFrameGrabberImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IFrameGrabberImage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IFrameGrabberImage
    __del__ = lambda self : None;
    def getImage(self, *args): return _yarp.IFrameGrabberImage_getImage(self, *args)
    def height(self): return _yarp.IFrameGrabberImage_height(self)
    def width(self): return _yarp.IFrameGrabberImage_width(self)
IFrameGrabberImage_swigregister = _yarp.IFrameGrabberImage_swigregister
IFrameGrabberImage_swigregister(IFrameGrabberImage)

class IFrameWriterImage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFrameWriterImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IFrameWriterImage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IFrameWriterImage
    __del__ = lambda self : None;
    def putImage(self, *args): return _yarp.IFrameWriterImage_putImage(self, *args)
IFrameWriterImage_swigregister = _yarp.IFrameWriterImage_swigregister
IFrameWriterImage_swigregister(IFrameWriterImage)

class IFrameGrabberControls(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFrameGrabberControls, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IFrameGrabberControls, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IFrameGrabberControls
    __del__ = lambda self : None;
    def setBrightness(self, *args): return _yarp.IFrameGrabberControls_setBrightness(self, *args)
    def setExposure(self, *args): return _yarp.IFrameGrabberControls_setExposure(self, *args)
    def setSharpness(self, *args): return _yarp.IFrameGrabberControls_setSharpness(self, *args)
    def setWhiteBalance(self, *args): return _yarp.IFrameGrabberControls_setWhiteBalance(self, *args)
    def setHue(self, *args): return _yarp.IFrameGrabberControls_setHue(self, *args)
    def setSaturation(self, *args): return _yarp.IFrameGrabberControls_setSaturation(self, *args)
    def setGamma(self, *args): return _yarp.IFrameGrabberControls_setGamma(self, *args)
    def setShutter(self, *args): return _yarp.IFrameGrabberControls_setShutter(self, *args)
    def setGain(self, *args): return _yarp.IFrameGrabberControls_setGain(self, *args)
    def setIris(self, *args): return _yarp.IFrameGrabberControls_setIris(self, *args)
    def getBrightness(self): return _yarp.IFrameGrabberControls_getBrightness(self)
    def getExposure(self): return _yarp.IFrameGrabberControls_getExposure(self)
    def getSharpness(self): return _yarp.IFrameGrabberControls_getSharpness(self)
    def getWhiteBalance(self, *args): return _yarp.IFrameGrabberControls_getWhiteBalance(self, *args)
    def getHue(self): return _yarp.IFrameGrabberControls_getHue(self)
    def getSaturation(self): return _yarp.IFrameGrabberControls_getSaturation(self)
    def getGamma(self): return _yarp.IFrameGrabberControls_getGamma(self)
    def getShutter(self): return _yarp.IFrameGrabberControls_getShutter(self)
    def getGain(self): return _yarp.IFrameGrabberControls_getGain(self)
    def getIris(self): return _yarp.IFrameGrabberControls_getIris(self)
IFrameGrabberControls_swigregister = _yarp.IFrameGrabberControls_swigregister
IFrameGrabberControls_swigregister(IFrameGrabberControls)

class IFrameGrabberControlsDC1394(IFrameGrabberControls):
    __swig_setmethods__ = {}
    for _s in [IFrameGrabberControls]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFrameGrabberControlsDC1394, name, value)
    __swig_getmethods__ = {}
    for _s in [IFrameGrabberControls]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFrameGrabberControlsDC1394, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def hasFeatureDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_hasFeatureDC1394(self, *args)
    def setFeatureDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_setFeatureDC1394(self, *args)
    def getFeatureDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_getFeatureDC1394(self, *args)
    def hasOnOffDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_hasOnOffDC1394(self, *args)
    def setActiveDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_setActiveDC1394(self, *args)
    def getActiveDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_getActiveDC1394(self, *args)
    def hasAutoDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_hasAutoDC1394(self, *args)
    def hasManualDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_hasManualDC1394(self, *args)
    def hasOnePushDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_hasOnePushDC1394(self, *args)
    def setModeDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_setModeDC1394(self, *args)
    def getModeDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_getModeDC1394(self, *args)
    def setOnePushDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_setOnePushDC1394(self, *args)
    def getVideoModeMaskDC1394(self): return _yarp.IFrameGrabberControlsDC1394_getVideoModeMaskDC1394(self)
    def getVideoModeDC1394(self): return _yarp.IFrameGrabberControlsDC1394_getVideoModeDC1394(self)
    def setVideoModeDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_setVideoModeDC1394(self, *args)
    def getFPSMaskDC1394(self): return _yarp.IFrameGrabberControlsDC1394_getFPSMaskDC1394(self)
    def getFPSDC1394(self): return _yarp.IFrameGrabberControlsDC1394_getFPSDC1394(self)
    def setFPSDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_setFPSDC1394(self, *args)
    def getISOSpeedDC1394(self): return _yarp.IFrameGrabberControlsDC1394_getISOSpeedDC1394(self)
    def setISOSpeedDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_setISOSpeedDC1394(self, *args)
    def getColorCodingMaskDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_getColorCodingMaskDC1394(self, *args)
    def getColorCodingDC1394(self): return _yarp.IFrameGrabberControlsDC1394_getColorCodingDC1394(self)
    def setColorCodingDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_setColorCodingDC1394(self, *args)
    def setWhiteBalanceDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_setWhiteBalanceDC1394(self, *args)
    def getWhiteBalanceDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_getWhiteBalanceDC1394(self, *args)
    def getFormat7MaxWindowDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_getFormat7MaxWindowDC1394(self, *args)
    def getFormat7WindowDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_getFormat7WindowDC1394(self, *args)
    def setFormat7WindowDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_setFormat7WindowDC1394(self, *args)
    def setOperationModeDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_setOperationModeDC1394(self, *args)
    def getOperationModeDC1394(self): return _yarp.IFrameGrabberControlsDC1394_getOperationModeDC1394(self)
    def setTransmissionDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_setTransmissionDC1394(self, *args)
    def getTransmissionDC1394(self): return _yarp.IFrameGrabberControlsDC1394_getTransmissionDC1394(self)
    def setBroadcastDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_setBroadcastDC1394(self, *args)
    def setDefaultsDC1394(self): return _yarp.IFrameGrabberControlsDC1394_setDefaultsDC1394(self)
    def setResetDC1394(self): return _yarp.IFrameGrabberControlsDC1394_setResetDC1394(self)
    def setPowerDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_setPowerDC1394(self, *args)
    def setCaptureDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_setCaptureDC1394(self, *args)
    def getBytesPerPacketDC1394(self): return _yarp.IFrameGrabberControlsDC1394_getBytesPerPacketDC1394(self)
    def setBytesPerPacketDC1394(self, *args): return _yarp.IFrameGrabberControlsDC1394_setBytesPerPacketDC1394(self, *args)
    __swig_destroy__ = _yarp.delete_IFrameGrabberControlsDC1394
    __del__ = lambda self : None;
IFrameGrabberControlsDC1394_swigregister = _yarp.IFrameGrabberControlsDC1394_swigregister
IFrameGrabberControlsDC1394_swigregister(IFrameGrabberControlsDC1394)

class IAudioVisualGrabber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAudioVisualGrabber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAudioVisualGrabber, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IAudioVisualGrabber
    __del__ = lambda self : None;
    def getAudioVisual(self, *args): return _yarp.IAudioVisualGrabber_getAudioVisual(self, *args)
IAudioVisualGrabber_swigregister = _yarp.IAudioVisualGrabber_swigregister
IAudioVisualGrabber_swigregister(IAudioVisualGrabber)

class IFrameWriterAudioVisual(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFrameWriterAudioVisual, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IFrameWriterAudioVisual, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IFrameWriterAudioVisual
    __del__ = lambda self : None;
    def putAudioVisual(self, *args): return _yarp.IFrameWriterAudioVisual_putAudioVisual(self, *args)
IFrameWriterAudioVisual_swigregister = _yarp.IFrameWriterAudioVisual_swigregister
IFrameWriterAudioVisual_swigregister(IFrameWriterAudioVisual)

class IAudioVisualStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAudioVisualStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAudioVisualStream, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IAudioVisualStream
    __del__ = lambda self : None;
    def hasAudio(self): return _yarp.IAudioVisualStream_hasAudio(self)
    def hasVideo(self): return _yarp.IAudioVisualStream_hasVideo(self)
IAudioVisualStream_swigregister = _yarp.IAudioVisualStream_swigregister
IAudioVisualStream_swigregister(IAudioVisualStream)

class IOpenLoopControlRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOpenLoopControlRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IOpenLoopControlRaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IOpenLoopControlRaw
    __del__ = lambda self : None;
    def setOutputRaw(self, *args): return _yarp.IOpenLoopControlRaw_setOutputRaw(self, *args)
    def setOutputsRaw(self, *args): return _yarp.IOpenLoopControlRaw_setOutputsRaw(self, *args)
    def getOutputsRaw(self, *args): return _yarp.IOpenLoopControlRaw_getOutputsRaw(self, *args)
    def getOutputRaw(self, *args): return _yarp.IOpenLoopControlRaw_getOutputRaw(self, *args)
    def setOpenLoopModeRaw(self): return _yarp.IOpenLoopControlRaw_setOpenLoopModeRaw(self)
IOpenLoopControlRaw_swigregister = _yarp.IOpenLoopControlRaw_swigregister
IOpenLoopControlRaw_swigregister(IOpenLoopControlRaw)

class IOpenLoopControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOpenLoopControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IOpenLoopControl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IOpenLoopControl
    __del__ = lambda self : None;
    def setOutput(self, *args): return _yarp.IOpenLoopControl_setOutput(self, *args)
    def setOutputs(self, *args): return _yarp.IOpenLoopControl_setOutputs(self, *args)
    def getOutput(self, *args): return _yarp.IOpenLoopControl_getOutput(self, *args)
    def getOutputs(self, *args): return _yarp.IOpenLoopControl_getOutputs(self, *args)
    def setOpenLoopMode(self): return _yarp.IOpenLoopControl_setOpenLoopMode(self)
IOpenLoopControl_swigregister = _yarp.IOpenLoopControl_swigregister
IOpenLoopControl_swigregister(IOpenLoopControl)

VOCAB_CM_IDLE = _yarp.VOCAB_CM_IDLE
VOCAB_CM_TORQUE = _yarp.VOCAB_CM_TORQUE
VOCAB_CM_POSITION = _yarp.VOCAB_CM_POSITION
VOCAB_CM_VELOCITY = _yarp.VOCAB_CM_VELOCITY
VOCAB_CM_UNKNOWN = _yarp.VOCAB_CM_UNKNOWN
VOCAB_CM_OPENLOOP = _yarp.VOCAB_CM_OPENLOOP
VOCAB_CM_IMPEDANCE_POS = _yarp.VOCAB_CM_IMPEDANCE_POS
VOCAB_CM_IMPEDANCE_VEL = _yarp.VOCAB_CM_IMPEDANCE_VEL
VOCAB_CM_CONTROL_MODE = _yarp.VOCAB_CM_CONTROL_MODE
VOCAB_CM_CONTROL_MODES = _yarp.VOCAB_CM_CONTROL_MODES
class IControlModeRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IControlModeRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IControlModeRaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IControlModeRaw
    __del__ = lambda self : None;
    def setPositionModeRaw(self, *args): return _yarp.IControlModeRaw_setPositionModeRaw(self, *args)
    def setVelocityModeRaw(self, *args): return _yarp.IControlModeRaw_setVelocityModeRaw(self, *args)
    def setTorqueModeRaw(self, *args): return _yarp.IControlModeRaw_setTorqueModeRaw(self, *args)
    def setImpedancePositionModeRaw(self, *args): return _yarp.IControlModeRaw_setImpedancePositionModeRaw(self, *args)
    def setImpedanceVelocityModeRaw(self, *args): return _yarp.IControlModeRaw_setImpedanceVelocityModeRaw(self, *args)
    def setOpenLoopModeRaw(self, *args): return _yarp.IControlModeRaw_setOpenLoopModeRaw(self, *args)
    def getControlModeRaw(self, *args): return _yarp.IControlModeRaw_getControlModeRaw(self, *args)
    def getControlModesRaw(self, *args): return _yarp.IControlModeRaw_getControlModesRaw(self, *args)
IControlModeRaw_swigregister = _yarp.IControlModeRaw_swigregister
IControlModeRaw_swigregister(IControlModeRaw)

class IControlMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IControlMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IControlMode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IControlMode
    __del__ = lambda self : None;
    def setPositionMode(self, *args): return _yarp.IControlMode_setPositionMode(self, *args)
    def setVelocityMode(self, *args): return _yarp.IControlMode_setVelocityMode(self, *args)
    def setTorqueMode(self, *args): return _yarp.IControlMode_setTorqueMode(self, *args)
    def setImpedancePositionMode(self, *args): return _yarp.IControlMode_setImpedancePositionMode(self, *args)
    def setImpedanceVelocityMode(self, *args): return _yarp.IControlMode_setImpedanceVelocityMode(self, *args)
    def setOpenLoopMode(self, *args): return _yarp.IControlMode_setOpenLoopMode(self, *args)
    def getControlMode(self, *args): return _yarp.IControlMode_getControlMode(self, *args)
    def getControlModes(self, *args): return _yarp.IControlMode_getControlModes(self, *args)
IControlMode_swigregister = _yarp.IControlMode_swigregister
IControlMode_swigregister(IControlMode)

class IPidControlRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPidControlRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPidControlRaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IPidControlRaw
    __del__ = lambda self : None;
    def setPidRaw(self, *args): return _yarp.IPidControlRaw_setPidRaw(self, *args)
    def setPidsRaw(self, *args): return _yarp.IPidControlRaw_setPidsRaw(self, *args)
    def setReferenceRaw(self, *args): return _yarp.IPidControlRaw_setReferenceRaw(self, *args)
    def setReferencesRaw(self, *args): return _yarp.IPidControlRaw_setReferencesRaw(self, *args)
    def setErrorLimitRaw(self, *args): return _yarp.IPidControlRaw_setErrorLimitRaw(self, *args)
    def setErrorLimitsRaw(self, *args): return _yarp.IPidControlRaw_setErrorLimitsRaw(self, *args)
    def getErrorRaw(self, *args): return _yarp.IPidControlRaw_getErrorRaw(self, *args)
    def getErrorsRaw(self, *args): return _yarp.IPidControlRaw_getErrorsRaw(self, *args)
    def getOutputRaw(self, *args): return _yarp.IPidControlRaw_getOutputRaw(self, *args)
    def getOutputsRaw(self, *args): return _yarp.IPidControlRaw_getOutputsRaw(self, *args)
    def getPidRaw(self, *args): return _yarp.IPidControlRaw_getPidRaw(self, *args)
    def getPidsRaw(self, *args): return _yarp.IPidControlRaw_getPidsRaw(self, *args)
    def getReferenceRaw(self, *args): return _yarp.IPidControlRaw_getReferenceRaw(self, *args)
    def getReferencesRaw(self, *args): return _yarp.IPidControlRaw_getReferencesRaw(self, *args)
    def getErrorLimitRaw(self, *args): return _yarp.IPidControlRaw_getErrorLimitRaw(self, *args)
    def getErrorLimitsRaw(self, *args): return _yarp.IPidControlRaw_getErrorLimitsRaw(self, *args)
    def resetPidRaw(self, *args): return _yarp.IPidControlRaw_resetPidRaw(self, *args)
    def disablePidRaw(self, *args): return _yarp.IPidControlRaw_disablePidRaw(self, *args)
    def enablePidRaw(self, *args): return _yarp.IPidControlRaw_enablePidRaw(self, *args)
    def setOffsetRaw(self, *args): return _yarp.IPidControlRaw_setOffsetRaw(self, *args)
IPidControlRaw_swigregister = _yarp.IPidControlRaw_swigregister
IPidControlRaw_swigregister(IPidControlRaw)

class IPidControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPidControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPidControl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IPidControl
    __del__ = lambda self : None;
    def setReference(self, *args): return _yarp.IPidControl_setReference(self, *args)
    def setErrorLimit(self, *args): return _yarp.IPidControl_setErrorLimit(self, *args)
    def resetPid(self, *args): return _yarp.IPidControl_resetPid(self, *args)
    def disablePid(self, *args): return _yarp.IPidControl_disablePid(self, *args)
    def enablePid(self, *args): return _yarp.IPidControl_enablePid(self, *args)
    def setOffset(self, *args): return _yarp.IPidControl_setOffset(self, *args)
    def setReferences(self, *args): return _yarp.IPidControl_setReferences(self, *args)
    def getReference(self, *args): return _yarp.IPidControl_getReference(self, *args)
    def getReferences(self, *args): return _yarp.IPidControl_getReferences(self, *args)
    def setErrorLimits(self, *args): return _yarp.IPidControl_setErrorLimits(self, *args)
    def getErrorLimit(self, *args): return _yarp.IPidControl_getErrorLimit(self, *args)
    def getErrorLimits(self, *args): return _yarp.IPidControl_getErrorLimits(self, *args)
    def getError(self, *args): return _yarp.IPidControl_getError(self, *args)
    def getErrors(self, *args): return _yarp.IPidControl_getErrors(self, *args)
    def getOutput(self, *args): return _yarp.IPidControl_getOutput(self, *args)
    def getOutputs(self, *args): return _yarp.IPidControl_getOutputs(self, *args)
    def setPid(self, *args): return _yarp.IPidControl_setPid(self, *args)
    def setPids(self, *args): return _yarp.IPidControl_setPids(self, *args)
    def getPid(self, *args): return _yarp.IPidControl_getPid(self, *args)
    def getPids(self, *args): return _yarp.IPidControl_getPids(self, *args)
IPidControl_swigregister = _yarp.IPidControl_swigregister
IPidControl_swigregister(IPidControl)

class IPositionControlRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPositionControlRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPositionControlRaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IPositionControlRaw
    __del__ = lambda self : None;
    def getAxes(self, *args): return _yarp.IPositionControlRaw_getAxes(self, *args)
    def setPositionModeRaw(self): return _yarp.IPositionControlRaw_setPositionModeRaw(self)
    def positionMoveRaw(self, *args): return _yarp.IPositionControlRaw_positionMoveRaw(self, *args)
    def relativeMoveRaw(self, *args): return _yarp.IPositionControlRaw_relativeMoveRaw(self, *args)
    def checkMotionDoneRaw(self, *args): return _yarp.IPositionControlRaw_checkMotionDoneRaw(self, *args)
    def setRefSpeedRaw(self, *args): return _yarp.IPositionControlRaw_setRefSpeedRaw(self, *args)
    def setRefSpeedsRaw(self, *args): return _yarp.IPositionControlRaw_setRefSpeedsRaw(self, *args)
    def setRefAccelerationRaw(self, *args): return _yarp.IPositionControlRaw_setRefAccelerationRaw(self, *args)
    def setRefAccelerationsRaw(self, *args): return _yarp.IPositionControlRaw_setRefAccelerationsRaw(self, *args)
    def getRefSpeedRaw(self, *args): return _yarp.IPositionControlRaw_getRefSpeedRaw(self, *args)
    def getRefSpeedsRaw(self, *args): return _yarp.IPositionControlRaw_getRefSpeedsRaw(self, *args)
    def getRefAccelerationRaw(self, *args): return _yarp.IPositionControlRaw_getRefAccelerationRaw(self, *args)
    def getRefAccelerationsRaw(self, *args): return _yarp.IPositionControlRaw_getRefAccelerationsRaw(self, *args)
    def stopRaw(self, *args): return _yarp.IPositionControlRaw_stopRaw(self, *args)
IPositionControlRaw_swigregister = _yarp.IPositionControlRaw_swigregister
IPositionControlRaw_swigregister(IPositionControlRaw)

class IPositionControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPositionControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPositionControl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IPositionControl
    __del__ = lambda self : None;
    def setPositionMode(self): return _yarp.IPositionControl_setPositionMode(self)
    def setRefSpeed(self, *args): return _yarp.IPositionControl_setRefSpeed(self, *args)
    def setRefAcceleration(self, *args): return _yarp.IPositionControl_setRefAcceleration(self, *args)
    def setRefAccelerations(self, *args): return _yarp.IPositionControl_setRefAccelerations(self, *args)
    def stop(self, *args): return _yarp.IPositionControl_stop(self, *args)
    def getAxes(self, *args): return _yarp.IPositionControl_getAxes(self, *args)
    def positionMove(self, *args): return _yarp.IPositionControl_positionMove(self, *args)
    def relativeMove(self, *args): return _yarp.IPositionControl_relativeMove(self, *args)
    def setRefSpeeds(self, *args): return _yarp.IPositionControl_setRefSpeeds(self, *args)
    def getRefSpeed(self, *args): return _yarp.IPositionControl_getRefSpeed(self, *args)
    def getRefSpeeds(self, *args): return _yarp.IPositionControl_getRefSpeeds(self, *args)
    def getRefAcceleration(self, *args): return _yarp.IPositionControl_getRefAcceleration(self, *args)
    def getRefAccelerations(self, *args): return _yarp.IPositionControl_getRefAccelerations(self, *args)
    def checkMotionDone(self, *args): return _yarp.IPositionControl_checkMotionDone(self, *args)
IPositionControl_swigregister = _yarp.IPositionControl_swigregister
IPositionControl_swigregister(IPositionControl)

class IVelocityControlRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IVelocityControlRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IVelocityControlRaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IVelocityControlRaw
    __del__ = lambda self : None;
    def getAxes(self, *args): return _yarp.IVelocityControlRaw_getAxes(self, *args)
    def setVelocityModeRaw(self): return _yarp.IVelocityControlRaw_setVelocityModeRaw(self)
    def velocityMoveRaw(self, *args): return _yarp.IVelocityControlRaw_velocityMoveRaw(self, *args)
    def setRefAccelerationRaw(self, *args): return _yarp.IVelocityControlRaw_setRefAccelerationRaw(self, *args)
    def setRefAccelerationsRaw(self, *args): return _yarp.IVelocityControlRaw_setRefAccelerationsRaw(self, *args)
    def getRefAccelerationRaw(self, *args): return _yarp.IVelocityControlRaw_getRefAccelerationRaw(self, *args)
    def getRefAccelerationsRaw(self, *args): return _yarp.IVelocityControlRaw_getRefAccelerationsRaw(self, *args)
    def stopRaw(self, *args): return _yarp.IVelocityControlRaw_stopRaw(self, *args)
IVelocityControlRaw_swigregister = _yarp.IVelocityControlRaw_swigregister
IVelocityControlRaw_swigregister(IVelocityControlRaw)

class IVelocityControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IVelocityControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IVelocityControl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IVelocityControl
    __del__ = lambda self : None;
    def setVelocityMode(self): return _yarp.IVelocityControl_setVelocityMode(self)
    def setRefAcceleration(self, *args): return _yarp.IVelocityControl_setRefAcceleration(self, *args)
    def stop(self, *args): return _yarp.IVelocityControl_stop(self, *args)
    def getAxes(self, *args): return _yarp.IVelocityControl_getAxes(self, *args)
    def velocityMove(self, *args): return _yarp.IVelocityControl_velocityMove(self, *args)
    def setRefAccelerations(self, *args): return _yarp.IVelocityControl_setRefAccelerations(self, *args)
    def getRefAcceleration(self, *args): return _yarp.IVelocityControl_getRefAcceleration(self, *args)
    def getRefAccelerations(self, *args): return _yarp.IVelocityControl_getRefAccelerations(self, *args)
IVelocityControl_swigregister = _yarp.IVelocityControl_swigregister
IVelocityControl_swigregister(IVelocityControl)

class ITorqueControlRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ITorqueControlRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ITorqueControlRaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_ITorqueControlRaw
    __del__ = lambda self : None;
    def getAxes(self, *args): return _yarp.ITorqueControlRaw_getAxes(self, *args)
    def setTorqueModeRaw(self): return _yarp.ITorqueControlRaw_setTorqueModeRaw(self)
    def getTorqueRaw(self, *args): return _yarp.ITorqueControlRaw_getTorqueRaw(self, *args)
    def getTorquesRaw(self, *args): return _yarp.ITorqueControlRaw_getTorquesRaw(self, *args)
    def getTorqueRangeRaw(self, *args): return _yarp.ITorqueControlRaw_getTorqueRangeRaw(self, *args)
    def getTorqueRangesRaw(self, *args): return _yarp.ITorqueControlRaw_getTorqueRangesRaw(self, *args)
    def setRefTorquesRaw(self, *args): return _yarp.ITorqueControlRaw_setRefTorquesRaw(self, *args)
    def setRefTorqueRaw(self, *args): return _yarp.ITorqueControlRaw_setRefTorqueRaw(self, *args)
    def getRefTorquesRaw(self, *args): return _yarp.ITorqueControlRaw_getRefTorquesRaw(self, *args)
    def getRefTorqueRaw(self, *args): return _yarp.ITorqueControlRaw_getRefTorqueRaw(self, *args)
    def setTorquePidRaw(self, *args): return _yarp.ITorqueControlRaw_setTorquePidRaw(self, *args)
    def setTorquePidsRaw(self, *args): return _yarp.ITorqueControlRaw_setTorquePidsRaw(self, *args)
    def setTorqueErrorLimitRaw(self, *args): return _yarp.ITorqueControlRaw_setTorqueErrorLimitRaw(self, *args)
    def setTorqueErrorLimitsRaw(self, *args): return _yarp.ITorqueControlRaw_setTorqueErrorLimitsRaw(self, *args)
    def getTorqueErrorRaw(self, *args): return _yarp.ITorqueControlRaw_getTorqueErrorRaw(self, *args)
    def getTorqueErrorsRaw(self, *args): return _yarp.ITorqueControlRaw_getTorqueErrorsRaw(self, *args)
    def getTorquePidOutputRaw(self, *args): return _yarp.ITorqueControlRaw_getTorquePidOutputRaw(self, *args)
    def getTorquePidOutputsRaw(self, *args): return _yarp.ITorqueControlRaw_getTorquePidOutputsRaw(self, *args)
    def getTorquePidRaw(self, *args): return _yarp.ITorqueControlRaw_getTorquePidRaw(self, *args)
    def getTorquePidsRaw(self, *args): return _yarp.ITorqueControlRaw_getTorquePidsRaw(self, *args)
    def getTorqueErrorLimitRaw(self, *args): return _yarp.ITorqueControlRaw_getTorqueErrorLimitRaw(self, *args)
    def getTorqueErrorLimitsRaw(self, *args): return _yarp.ITorqueControlRaw_getTorqueErrorLimitsRaw(self, *args)
    def resetTorquePidRaw(self, *args): return _yarp.ITorqueControlRaw_resetTorquePidRaw(self, *args)
    def disableTorquePidRaw(self, *args): return _yarp.ITorqueControlRaw_disableTorquePidRaw(self, *args)
    def enableTorquePidRaw(self, *args): return _yarp.ITorqueControlRaw_enableTorquePidRaw(self, *args)
    def setTorqueOffsetRaw(self, *args): return _yarp.ITorqueControlRaw_setTorqueOffsetRaw(self, *args)
ITorqueControlRaw_swigregister = _yarp.ITorqueControlRaw_swigregister
ITorqueControlRaw_swigregister(ITorqueControlRaw)

class IImpedanceControlRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IImpedanceControlRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IImpedanceControlRaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IImpedanceControlRaw
    __del__ = lambda self : None;
    def getAxes(self, *args): return _yarp.IImpedanceControlRaw_getAxes(self, *args)
    def getImpedanceRaw(self, *args): return _yarp.IImpedanceControlRaw_getImpedanceRaw(self, *args)
    def setImpedanceRaw(self, *args): return _yarp.IImpedanceControlRaw_setImpedanceRaw(self, *args)
    def setImpedanceOffsetRaw(self, *args): return _yarp.IImpedanceControlRaw_setImpedanceOffsetRaw(self, *args)
    def getImpedanceOffsetRaw(self, *args): return _yarp.IImpedanceControlRaw_getImpedanceOffsetRaw(self, *args)
IImpedanceControlRaw_swigregister = _yarp.IImpedanceControlRaw_swigregister
IImpedanceControlRaw_swigregister(IImpedanceControlRaw)

class IEncodersRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IEncodersRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IEncodersRaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IEncodersRaw
    __del__ = lambda self : None;
    def getAxes(self, *args): return _yarp.IEncodersRaw_getAxes(self, *args)
    def resetEncoderRaw(self, *args): return _yarp.IEncodersRaw_resetEncoderRaw(self, *args)
    def resetEncodersRaw(self): return _yarp.IEncodersRaw_resetEncodersRaw(self)
    def setEncoderRaw(self, *args): return _yarp.IEncodersRaw_setEncoderRaw(self, *args)
    def setEncodersRaw(self, *args): return _yarp.IEncodersRaw_setEncodersRaw(self, *args)
    def getEncoderRaw(self, *args): return _yarp.IEncodersRaw_getEncoderRaw(self, *args)
    def getEncodersRaw(self, *args): return _yarp.IEncodersRaw_getEncodersRaw(self, *args)
    def getEncoderSpeedRaw(self, *args): return _yarp.IEncodersRaw_getEncoderSpeedRaw(self, *args)
    def getEncoderSpeedsRaw(self, *args): return _yarp.IEncodersRaw_getEncoderSpeedsRaw(self, *args)
    def getEncoderAccelerationRaw(self, *args): return _yarp.IEncodersRaw_getEncoderAccelerationRaw(self, *args)
    def getEncoderAccelerationsRaw(self, *args): return _yarp.IEncodersRaw_getEncoderAccelerationsRaw(self, *args)
IEncodersRaw_swigregister = _yarp.IEncodersRaw_swigregister
IEncodersRaw_swigregister(IEncodersRaw)

class IEncoders(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IEncoders, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IEncoders, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IEncoders
    __del__ = lambda self : None;
    def resetEncoder(self, *args): return _yarp.IEncoders_resetEncoder(self, *args)
    def resetEncoders(self): return _yarp.IEncoders_resetEncoders(self)
    def setEncoder(self, *args): return _yarp.IEncoders_setEncoder(self, *args)
    def getAxes(self, *args): return _yarp.IEncoders_getAxes(self, *args)
    def setEncoders(self, *args): return _yarp.IEncoders_setEncoders(self, *args)
    def getEncoder(self, *args): return _yarp.IEncoders_getEncoder(self, *args)
    def getEncoders(self, *args): return _yarp.IEncoders_getEncoders(self, *args)
    def getEncoderSpeed(self, *args): return _yarp.IEncoders_getEncoderSpeed(self, *args)
    def getEncoderSpeeds(self, *args): return _yarp.IEncoders_getEncoderSpeeds(self, *args)
    def getEncoderAcceleration(self, *args): return _yarp.IEncoders_getEncoderAcceleration(self, *args)
    def getEncoderAccelerations(self, *args): return _yarp.IEncoders_getEncoderAccelerations(self, *args)
IEncoders_swigregister = _yarp.IEncoders_swigregister
IEncoders_swigregister(IEncoders)

class IAmplifierControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAmplifierControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAmplifierControl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IAmplifierControl
    __del__ = lambda self : None;
    def enableAmp(self, *args): return _yarp.IAmplifierControl_enableAmp(self, *args)
    def disableAmp(self, *args): return _yarp.IAmplifierControl_disableAmp(self, *args)
    def setMaxCurrent(self, *args): return _yarp.IAmplifierControl_setMaxCurrent(self, *args)
    def getAmpStatus(self, *args): return _yarp.IAmplifierControl_getAmpStatus(self, *args)
    def getCurrents(self, *args): return _yarp.IAmplifierControl_getCurrents(self, *args)
    def getCurrent(self, *args): return _yarp.IAmplifierControl_getCurrent(self, *args)
IAmplifierControl_swigregister = _yarp.IAmplifierControl_swigregister
IAmplifierControl_swigregister(IAmplifierControl)

class IAmplifierControlRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAmplifierControlRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAmplifierControlRaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IAmplifierControlRaw
    __del__ = lambda self : None;
    def enableAmpRaw(self, *args): return _yarp.IAmplifierControlRaw_enableAmpRaw(self, *args)
    def disableAmpRaw(self, *args): return _yarp.IAmplifierControlRaw_disableAmpRaw(self, *args)
    def getCurrentsRaw(self, *args): return _yarp.IAmplifierControlRaw_getCurrentsRaw(self, *args)
    def getCurrentRaw(self, *args): return _yarp.IAmplifierControlRaw_getCurrentRaw(self, *args)
    def setMaxCurrentRaw(self, *args): return _yarp.IAmplifierControlRaw_setMaxCurrentRaw(self, *args)
    def getAmpStatusRaw(self, *args): return _yarp.IAmplifierControlRaw_getAmpStatusRaw(self, *args)
IAmplifierControlRaw_swigregister = _yarp.IAmplifierControlRaw_swigregister
IAmplifierControlRaw_swigregister(IAmplifierControlRaw)

class IControlCalibrationRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IControlCalibrationRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IControlCalibrationRaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IControlCalibrationRaw
    __del__ = lambda self : None;
    def calibrateRaw(self, *args): return _yarp.IControlCalibrationRaw_calibrateRaw(self, *args)
    def doneRaw(self, *args): return _yarp.IControlCalibrationRaw_doneRaw(self, *args)
IControlCalibrationRaw_swigregister = _yarp.IControlCalibrationRaw_swigregister
IControlCalibrationRaw_swigregister(IControlCalibrationRaw)

class IControlCalibration2Raw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IControlCalibration2Raw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IControlCalibration2Raw, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IControlCalibration2Raw
    __del__ = lambda self : None;
    def calibrate2Raw(self, *args): return _yarp.IControlCalibration2Raw_calibrate2Raw(self, *args)
    def doneRaw(self, *args): return _yarp.IControlCalibration2Raw_doneRaw(self, *args)
IControlCalibration2Raw_swigregister = _yarp.IControlCalibration2Raw_swigregister
IControlCalibration2Raw_swigregister(IControlCalibration2Raw)

class IControlCalibration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IControlCalibration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IControlCalibration, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IControlCalibration
    __del__ = lambda self : None;
    def done(self, *args): return _yarp.IControlCalibration_done(self, *args)
    def setCalibrator(self, *args): return _yarp.IControlCalibration_setCalibrator(self, *args)
    def calibrate(self, *args): return _yarp.IControlCalibration_calibrate(self, *args)
    def park(self, wait = True): return _yarp.IControlCalibration_park(self, wait)
IControlCalibration_swigregister = _yarp.IControlCalibration_swigregister
IControlCalibration_swigregister(IControlCalibration)

class IControlCalibration2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IControlCalibration2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IControlCalibration2, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IControlCalibration2
    __del__ = lambda self : None;
    def calibrate2(self, *args): return _yarp.IControlCalibration2_calibrate2(self, *args)
    def done(self, *args): return _yarp.IControlCalibration2_done(self, *args)
    def setCalibrator(self, *args): return _yarp.IControlCalibration2_setCalibrator(self, *args)
    def calibrate(self): return _yarp.IControlCalibration2_calibrate(self)
    def park(self, wait = True): return _yarp.IControlCalibration2_park(self, wait)
    def abortCalibration(self): return _yarp.IControlCalibration2_abortCalibration(self)
    def abortPark(self): return _yarp.IControlCalibration2_abortPark(self)
IControlCalibration2_swigregister = _yarp.IControlCalibration2_swigregister
IControlCalibration2_swigregister(IControlCalibration2)

class IControlDebug(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IControlDebug, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IControlDebug, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IControlDebug
    __del__ = lambda self : None;
    def setPrintFunction(self, *args): return _yarp.IControlDebug_setPrintFunction(self, *args)
    def loadBootMemory(self): return _yarp.IControlDebug_loadBootMemory(self)
    def saveBootMemory(self): return _yarp.IControlDebug_saveBootMemory(self)
IControlDebug_swigregister = _yarp.IControlDebug_swigregister
IControlDebug_swigregister(IControlDebug)

class IControlLimits(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IControlLimits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IControlLimits, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IControlLimits
    __del__ = lambda self : None;
    def setLimits(self, *args): return _yarp.IControlLimits_setLimits(self, *args)
    def getLimits(self, *args): return _yarp.IControlLimits_getLimits(self, *args)
IControlLimits_swigregister = _yarp.IControlLimits_swigregister
IControlLimits_swigregister(IControlLimits)

class IControlLimitsRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IControlLimitsRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IControlLimitsRaw, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IControlLimitsRaw
    __del__ = lambda self : None;
    def setLimitsRaw(self, *args): return _yarp.IControlLimitsRaw_setLimitsRaw(self, *args)
    def getLimitsRaw(self, *args): return _yarp.IControlLimitsRaw_getLimitsRaw(self, *args)
IControlLimitsRaw_swigregister = _yarp.IControlLimitsRaw_swigregister
IControlLimitsRaw_swigregister(IControlLimitsRaw)

class IAxisInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAxisInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAxisInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IAxisInfo
    __del__ = lambda self : None;
    def getAxisName(self, *args): return _yarp.IAxisInfo_getAxisName(self, *args)
IAxisInfo_swigregister = _yarp.IAxisInfo_swigregister
IAxisInfo_swigregister(IAxisInfo)

class ITorqueControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ITorqueControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ITorqueControl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_ITorqueControl
    __del__ = lambda self : None;
    def getAxes(self, *args): return _yarp.ITorqueControl_getAxes(self, *args)
    def setTorqueMode(self): return _yarp.ITorqueControl_setTorqueMode(self)
    def getRefTorques(self, *args): return _yarp.ITorqueControl_getRefTorques(self, *args)
    def getRefTorque(self, *args): return _yarp.ITorqueControl_getRefTorque(self, *args)
    def setRefTorques(self, *args): return _yarp.ITorqueControl_setRefTorques(self, *args)
    def setRefTorque(self, *args): return _yarp.ITorqueControl_setRefTorque(self, *args)
    def setTorquePid(self, *args): return _yarp.ITorqueControl_setTorquePid(self, *args)
    def getTorque(self, *args): return _yarp.ITorqueControl_getTorque(self, *args)
    def getTorques(self, *args): return _yarp.ITorqueControl_getTorques(self, *args)
    def getTorqueRange(self, *args): return _yarp.ITorqueControl_getTorqueRange(self, *args)
    def getTorqueRanges(self, *args): return _yarp.ITorqueControl_getTorqueRanges(self, *args)
    def setTorquePids(self, *args): return _yarp.ITorqueControl_setTorquePids(self, *args)
    def setTorqueErrorLimit(self, *args): return _yarp.ITorqueControl_setTorqueErrorLimit(self, *args)
    def setTorqueErrorLimits(self, *args): return _yarp.ITorqueControl_setTorqueErrorLimits(self, *args)
    def getTorqueError(self, *args): return _yarp.ITorqueControl_getTorqueError(self, *args)
    def getTorqueErrors(self, *args): return _yarp.ITorqueControl_getTorqueErrors(self, *args)
    def getTorquePidOutput(self, *args): return _yarp.ITorqueControl_getTorquePidOutput(self, *args)
    def getTorquePidOutputs(self, *args): return _yarp.ITorqueControl_getTorquePidOutputs(self, *args)
    def getTorquePid(self, *args): return _yarp.ITorqueControl_getTorquePid(self, *args)
    def getTorquePids(self, *args): return _yarp.ITorqueControl_getTorquePids(self, *args)
    def getTorqueErrorLimit(self, *args): return _yarp.ITorqueControl_getTorqueErrorLimit(self, *args)
    def getTorqueErrorLimits(self, *args): return _yarp.ITorqueControl_getTorqueErrorLimits(self, *args)
    def resetTorquePid(self, *args): return _yarp.ITorqueControl_resetTorquePid(self, *args)
    def disableTorquePid(self, *args): return _yarp.ITorqueControl_disableTorquePid(self, *args)
    def enableTorquePid(self, *args): return _yarp.ITorqueControl_enableTorquePid(self, *args)
    def setTorqueOffset(self, *args): return _yarp.ITorqueControl_setTorqueOffset(self, *args)
ITorqueControl_swigregister = _yarp.ITorqueControl_swigregister
ITorqueControl_swigregister(ITorqueControl)

class IImpedanceControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IImpedanceControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IImpedanceControl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_IImpedanceControl
    __del__ = lambda self : None;
    def getAxes(self, *args): return _yarp.IImpedanceControl_getAxes(self, *args)
    def getImpedance(self, *args): return _yarp.IImpedanceControl_getImpedance(self, *args)
    def setImpedance(self, *args): return _yarp.IImpedanceControl_setImpedance(self, *args)
    def setImpedanceOffset(self, *args): return _yarp.IImpedanceControl_setImpedanceOffset(self, *args)
    def getImpedanceOffset(self, *args): return _yarp.IImpedanceControl_getImpedanceOffset(self, *args)
IImpedanceControl_swigregister = _yarp.IImpedanceControl_swigregister
IImpedanceControl_swigregister(IImpedanceControl)

VOCAB_CALIBRATE_JOINT = _yarp.VOCAB_CALIBRATE_JOINT
VOCAB_CALIBRATE = _yarp.VOCAB_CALIBRATE
VOCAB_ABORTCALIB = _yarp.VOCAB_ABORTCALIB
VOCAB_ABORTPARK = _yarp.VOCAB_ABORTPARK
VOCAB_CALIBRATE_DONE = _yarp.VOCAB_CALIBRATE_DONE
VOCAB_PARK = _yarp.VOCAB_PARK
VOCAB_SET = _yarp.VOCAB_SET
VOCAB_GET = _yarp.VOCAB_GET
VOCAB_IS = _yarp.VOCAB_IS
VOCAB_FAILED = _yarp.VOCAB_FAILED
VOCAB_OK = _yarp.VOCAB_OK
VOCAB_OFFSET = _yarp.VOCAB_OFFSET
VOCAB_PID = _yarp.VOCAB_PID
VOCAB_PIDS = _yarp.VOCAB_PIDS
VOCAB_REF = _yarp.VOCAB_REF
VOCAB_REFS = _yarp.VOCAB_REFS
VOCAB_LIM = _yarp.VOCAB_LIM
VOCAB_LIMS = _yarp.VOCAB_LIMS
VOCAB_RESET = _yarp.VOCAB_RESET
VOCAB_DISABLE = _yarp.VOCAB_DISABLE
VOCAB_ENABLE = _yarp.VOCAB_ENABLE
VOCAB_ERR = _yarp.VOCAB_ERR
VOCAB_ERRS = _yarp.VOCAB_ERRS
VOCAB_OUTPUT = _yarp.VOCAB_OUTPUT
VOCAB_OUTPUTS = _yarp.VOCAB_OUTPUTS
VOCAB_REFERENCE = _yarp.VOCAB_REFERENCE
VOCAB_REFERENCES = _yarp.VOCAB_REFERENCES
VOCAB_AXES = _yarp.VOCAB_AXES
VOCAB_MOTION_DONE = _yarp.VOCAB_MOTION_DONE
VOCAB_MOTION_DONES = _yarp.VOCAB_MOTION_DONES
VOCAB_POSITION_MODE = _yarp.VOCAB_POSITION_MODE
VOCAB_POSITION_MOVE = _yarp.VOCAB_POSITION_MOVE
VOCAB_POSITION_MOVES = _yarp.VOCAB_POSITION_MOVES
VOCAB_RELATIVE_MOVE = _yarp.VOCAB_RELATIVE_MOVE
VOCAB_RELATIVE_MOVES = _yarp.VOCAB_RELATIVE_MOVES
VOCAB_REF_SPEED = _yarp.VOCAB_REF_SPEED
VOCAB_REF_SPEEDS = _yarp.VOCAB_REF_SPEEDS
VOCAB_REF_ACCELERATION = _yarp.VOCAB_REF_ACCELERATION
VOCAB_REF_ACCELERATIONS = _yarp.VOCAB_REF_ACCELERATIONS
VOCAB_STOP = _yarp.VOCAB_STOP
VOCAB_STOPS = _yarp.VOCAB_STOPS
VOCAB_VELOCITY_MODE = _yarp.VOCAB_VELOCITY_MODE
VOCAB_VELOCITY_MOVE = _yarp.VOCAB_VELOCITY_MOVE
VOCAB_VELOCITY_MOVES = _yarp.VOCAB_VELOCITY_MOVES
VOCAB_E_RESET = _yarp.VOCAB_E_RESET
VOCAB_E_RESETS = _yarp.VOCAB_E_RESETS
VOCAB_ENCODER = _yarp.VOCAB_ENCODER
VOCAB_ENCODERS = _yarp.VOCAB_ENCODERS
VOCAB_ENCODER_SPEED = _yarp.VOCAB_ENCODER_SPEED
VOCAB_ENCODER_SPEEDS = _yarp.VOCAB_ENCODER_SPEEDS
VOCAB_ENCODER_ACCELERATION = _yarp.VOCAB_ENCODER_ACCELERATION
VOCAB_ENCODER_ACCELERATIONS = _yarp.VOCAB_ENCODER_ACCELERATIONS
VOCAB_AMP_ENABLE = _yarp.VOCAB_AMP_ENABLE
VOCAB_AMP_DISABLE = _yarp.VOCAB_AMP_DISABLE
VOCAB_AMP_CURRENT = _yarp.VOCAB_AMP_CURRENT
VOCAB_AMP_CURRENTS = _yarp.VOCAB_AMP_CURRENTS
VOCAB_AMP_MAXCURRENT = _yarp.VOCAB_AMP_MAXCURRENT
VOCAB_AMP_STATUS = _yarp.VOCAB_AMP_STATUS
VOCAB_AMP_STATUS_SINGLE = _yarp.VOCAB_AMP_STATUS_SINGLE
VOCAB_LIMITS = _yarp.VOCAB_LIMITS
VOCAB_OPENLOOP_MODE = _yarp.VOCAB_OPENLOOP_MODE
VOCAB_INFO_NAME = _yarp.VOCAB_INFO_NAME
VOCAB_TIMESTAMP = _yarp.VOCAB_TIMESTAMP
VOCAB_TORQUE = _yarp.VOCAB_TORQUE
VOCAB_TORQUE_MODE = _yarp.VOCAB_TORQUE_MODE
VOCAB_TRQS = _yarp.VOCAB_TRQS
VOCAB_TRQ = _yarp.VOCAB_TRQ
VOCAB_RANGES = _yarp.VOCAB_RANGES
VOCAB_RANGE = _yarp.VOCAB_RANGE
VOCAB_IMP_PARAM = _yarp.VOCAB_IMP_PARAM
VOCAB_IMP_OFFSET = _yarp.VOCAB_IMP_OFFSET
VOCAB_IMPEDANCE = _yarp.VOCAB_IMPEDANCE
VOCAB_ICONTROLMODE = _yarp.VOCAB_ICONTROLMODE
VOCAB_POSITION = _yarp.VOCAB_POSITION
VOCAB_VELOCITY = _yarp.VOCAB_VELOCITY
VOCAB_IOPENLOOP = _yarp.VOCAB_IOPENLOOP
class Pid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["kp"] = _yarp.Pid_kp_set
    __swig_getmethods__["kp"] = _yarp.Pid_kp_get
    if _newclass:kp = _swig_property(_yarp.Pid_kp_get, _yarp.Pid_kp_set)
    __swig_setmethods__["kd"] = _yarp.Pid_kd_set
    __swig_getmethods__["kd"] = _yarp.Pid_kd_get
    if _newclass:kd = _swig_property(_yarp.Pid_kd_get, _yarp.Pid_kd_set)
    __swig_setmethods__["ki"] = _yarp.Pid_ki_set
    __swig_getmethods__["ki"] = _yarp.Pid_ki_get
    if _newclass:ki = _swig_property(_yarp.Pid_ki_get, _yarp.Pid_ki_set)
    __swig_setmethods__["max_int"] = _yarp.Pid_max_int_set
    __swig_getmethods__["max_int"] = _yarp.Pid_max_int_get
    if _newclass:max_int = _swig_property(_yarp.Pid_max_int_get, _yarp.Pid_max_int_set)
    __swig_setmethods__["scale"] = _yarp.Pid_scale_set
    __swig_getmethods__["scale"] = _yarp.Pid_scale_get
    if _newclass:scale = _swig_property(_yarp.Pid_scale_get, _yarp.Pid_scale_set)
    __swig_setmethods__["max_output"] = _yarp.Pid_max_output_set
    __swig_getmethods__["max_output"] = _yarp.Pid_max_output_get
    if _newclass:max_output = _swig_property(_yarp.Pid_max_output_get, _yarp.Pid_max_output_set)
    __swig_setmethods__["offset"] = _yarp.Pid_offset_set
    __swig_getmethods__["offset"] = _yarp.Pid_offset_get
    if _newclass:offset = _swig_property(_yarp.Pid_offset_get, _yarp.Pid_offset_set)
    __swig_destroy__ = _yarp.delete_Pid
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _yarp.new_Pid(*args)
        try: self.this.append(this)
        except: self.this = this
    def setMaxInt(self, *args): return _yarp.Pid_setMaxInt(self, *args)
    def setMaxOut(self, *args): return _yarp.Pid_setMaxOut(self, *args)
Pid_swigregister = _yarp.Pid_swigregister
Pid_swigregister(Pid)

class ICartesianControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICartesianControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICartesianControl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_ICartesianControl
    __del__ = lambda self : None;
    def setTrackingMode(self, *args): return _yarp.ICartesianControl_setTrackingMode(self, *args)
    def getTrackingMode(self, *args): return _yarp.ICartesianControl_getTrackingMode(self, *args)
    def getPose(self, *args): return _yarp.ICartesianControl_getPose(self, *args)
    def goToPose(self, *args): return _yarp.ICartesianControl_goToPose(self, *args)
    def goToPosition(self, *args): return _yarp.ICartesianControl_goToPosition(self, *args)
    def goToPoseSync(self, *args): return _yarp.ICartesianControl_goToPoseSync(self, *args)
    def goToPositionSync(self, *args): return _yarp.ICartesianControl_goToPositionSync(self, *args)
    def getDesired(self, *args): return _yarp.ICartesianControl_getDesired(self, *args)
    def askForPose(self, *args): return _yarp.ICartesianControl_askForPose(self, *args)
    def askForPosition(self, *args): return _yarp.ICartesianControl_askForPosition(self, *args)
    def getDOF(self, *args): return _yarp.ICartesianControl_getDOF(self, *args)
    def setDOF(self, *args): return _yarp.ICartesianControl_setDOF(self, *args)
    def getRestPos(self, *args): return _yarp.ICartesianControl_getRestPos(self, *args)
    def setRestPos(self, *args): return _yarp.ICartesianControl_setRestPos(self, *args)
    def getRestWeights(self, *args): return _yarp.ICartesianControl_getRestWeights(self, *args)
    def setRestWeights(self, *args): return _yarp.ICartesianControl_setRestWeights(self, *args)
    def getLimits(self, *args): return _yarp.ICartesianControl_getLimits(self, *args)
    def setLimits(self, *args): return _yarp.ICartesianControl_setLimits(self, *args)
    def getTrajTime(self, *args): return _yarp.ICartesianControl_getTrajTime(self, *args)
    def setTrajTime(self, *args): return _yarp.ICartesianControl_setTrajTime(self, *args)
    def getInTargetTol(self, *args): return _yarp.ICartesianControl_getInTargetTol(self, *args)
    def setInTargetTol(self, *args): return _yarp.ICartesianControl_setInTargetTol(self, *args)
    def getJointsVelocities(self, *args): return _yarp.ICartesianControl_getJointsVelocities(self, *args)
    def getTaskVelocities(self, *args): return _yarp.ICartesianControl_getTaskVelocities(self, *args)
    def setTaskVelocities(self, *args): return _yarp.ICartesianControl_setTaskVelocities(self, *args)
    def waitMotionDone(self, period = 0.1, timeout = 0.0): return _yarp.ICartesianControl_waitMotionDone(self, period, timeout)
    def stopControl(self): return _yarp.ICartesianControl_stopControl(self)
    def storeContext(self, *args): return _yarp.ICartesianControl_storeContext(self, *args)
    def restoreContext(self, *args): return _yarp.ICartesianControl_restoreContext(self, *args)
    def checkMotionDone(self, *args): return _yarp.ICartesianControl_checkMotionDone(self, *args)
ICartesianControl_swigregister = _yarp.ICartesianControl_swigregister
ICartesianControl_swigregister(ICartesianControl)

class DVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _yarp.DVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _yarp.DVector___nonzero__(self)
    def __bool__(self): return _yarp.DVector___bool__(self)
    def __len__(self): return _yarp.DVector___len__(self)
    def pop(self): return _yarp.DVector_pop(self)
    def __getslice__(self, *args): return _yarp.DVector___getslice__(self, *args)
    def __setslice__(self, *args): return _yarp.DVector___setslice__(self, *args)
    def __delslice__(self, *args): return _yarp.DVector___delslice__(self, *args)
    def __delitem__(self, *args): return _yarp.DVector___delitem__(self, *args)
    def __getitem__(self, *args): return _yarp.DVector___getitem__(self, *args)
    def __setitem__(self, *args): return _yarp.DVector___setitem__(self, *args)
    def append(self, *args): return _yarp.DVector_append(self, *args)
    def empty(self): return _yarp.DVector_empty(self)
    def size(self): return _yarp.DVector_size(self)
    def clear(self): return _yarp.DVector_clear(self)
    def swap(self, *args): return _yarp.DVector_swap(self, *args)
    def get_allocator(self): return _yarp.DVector_get_allocator(self)
    def begin(self): return _yarp.DVector_begin(self)
    def end(self): return _yarp.DVector_end(self)
    def rbegin(self): return _yarp.DVector_rbegin(self)
    def rend(self): return _yarp.DVector_rend(self)
    def pop_back(self): return _yarp.DVector_pop_back(self)
    def erase(self, *args): return _yarp.DVector_erase(self, *args)
    def __init__(self, *args): 
        this = _yarp.new_DVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _yarp.DVector_push_back(self, *args)
    def front(self): return _yarp.DVector_front(self)
    def back(self): return _yarp.DVector_back(self)
    def assign(self, *args): return _yarp.DVector_assign(self, *args)
    def resize(self, *args): return _yarp.DVector_resize(self, *args)
    def insert(self, *args): return _yarp.DVector_insert(self, *args)
    def reserve(self, *args): return _yarp.DVector_reserve(self, *args)
    def capacity(self): return _yarp.DVector_capacity(self)
    __swig_destroy__ = _yarp.delete_DVector
    __del__ = lambda self : None;
DVector_swigregister = _yarp.DVector_swigregister
DVector_swigregister(DVector)

class BVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _yarp.BVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _yarp.BVector___nonzero__(self)
    def __bool__(self): return _yarp.BVector___bool__(self)
    def __len__(self): return _yarp.BVector___len__(self)
    def pop(self): return _yarp.BVector_pop(self)
    def __getslice__(self, *args): return _yarp.BVector___getslice__(self, *args)
    def __setslice__(self, *args): return _yarp.BVector___setslice__(self, *args)
    def __delslice__(self, *args): return _yarp.BVector___delslice__(self, *args)
    def __delitem__(self, *args): return _yarp.BVector___delitem__(self, *args)
    def __getitem__(self, *args): return _yarp.BVector___getitem__(self, *args)
    def __setitem__(self, *args): return _yarp.BVector___setitem__(self, *args)
    def append(self, *args): return _yarp.BVector_append(self, *args)
    def empty(self): return _yarp.BVector_empty(self)
    def size(self): return _yarp.BVector_size(self)
    def clear(self): return _yarp.BVector_clear(self)
    def swap(self, *args): return _yarp.BVector_swap(self, *args)
    def get_allocator(self): return _yarp.BVector_get_allocator(self)
    def begin(self): return _yarp.BVector_begin(self)
    def end(self): return _yarp.BVector_end(self)
    def rbegin(self): return _yarp.BVector_rbegin(self)
    def rend(self): return _yarp.BVector_rend(self)
    def pop_back(self): return _yarp.BVector_pop_back(self)
    def erase(self, *args): return _yarp.BVector_erase(self, *args)
    def __init__(self, *args): 
        this = _yarp.new_BVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _yarp.BVector_push_back(self, *args)
    def front(self): return _yarp.BVector_front(self)
    def back(self): return _yarp.BVector_back(self)
    def assign(self, *args): return _yarp.BVector_assign(self, *args)
    def resize(self, *args): return _yarp.BVector_resize(self, *args)
    def insert(self, *args): return _yarp.BVector_insert(self, *args)
    def reserve(self, *args): return _yarp.BVector_reserve(self, *args)
    def capacity(self): return _yarp.BVector_capacity(self)
    __swig_destroy__ = _yarp.delete_BVector
    __del__ = lambda self : None;
BVector_swigregister = _yarp.BVector_swigregister
BVector_swigregister(BVector)

class PidVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PidVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PidVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _yarp.PidVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _yarp.PidVector___nonzero__(self)
    def __bool__(self): return _yarp.PidVector___bool__(self)
    def __len__(self): return _yarp.PidVector___len__(self)
    def pop(self): return _yarp.PidVector_pop(self)
    def __getslice__(self, *args): return _yarp.PidVector___getslice__(self, *args)
    def __setslice__(self, *args): return _yarp.PidVector___setslice__(self, *args)
    def __delslice__(self, *args): return _yarp.PidVector___delslice__(self, *args)
    def __delitem__(self, *args): return _yarp.PidVector___delitem__(self, *args)
    def __getitem__(self, *args): return _yarp.PidVector___getitem__(self, *args)
    def __setitem__(self, *args): return _yarp.PidVector___setitem__(self, *args)
    def append(self, *args): return _yarp.PidVector_append(self, *args)
    def empty(self): return _yarp.PidVector_empty(self)
    def size(self): return _yarp.PidVector_size(self)
    def clear(self): return _yarp.PidVector_clear(self)
    def swap(self, *args): return _yarp.PidVector_swap(self, *args)
    def get_allocator(self): return _yarp.PidVector_get_allocator(self)
    def begin(self): return _yarp.PidVector_begin(self)
    def end(self): return _yarp.PidVector_end(self)
    def rbegin(self): return _yarp.PidVector_rbegin(self)
    def rend(self): return _yarp.PidVector_rend(self)
    def pop_back(self): return _yarp.PidVector_pop_back(self)
    def erase(self, *args): return _yarp.PidVector_erase(self, *args)
    def __init__(self, *args): 
        this = _yarp.new_PidVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _yarp.PidVector_push_back(self, *args)
    def front(self): return _yarp.PidVector_front(self)
    def back(self): return _yarp.PidVector_back(self)
    def assign(self, *args): return _yarp.PidVector_assign(self, *args)
    def resize(self, *args): return _yarp.PidVector_resize(self, *args)
    def insert(self, *args): return _yarp.PidVector_insert(self, *args)
    def reserve(self, *args): return _yarp.PidVector_reserve(self, *args)
    def capacity(self): return _yarp.PidVector_capacity(self)
    __swig_destroy__ = _yarp.delete_PidVector
    __del__ = lambda self : None;
PidVector_swigregister = _yarp.PidVector_swigregister
PidVector_swigregister(PidVector)

class ImageRgb(Image):
    __swig_setmethods__ = {}
    for _s in [Image]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageRgb, name, value)
    __swig_getmethods__ = {}
    for _s in [Image]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageRgb, name)
    __repr__ = _swig_repr
    def getPixelSize(self): return _yarp.ImageRgb_getPixelSize(self)
    def getPixelCode(self): return _yarp.ImageRgb_getPixelCode(self)
    def pixel(self, *args): return _yarp.ImageRgb_pixel(self, *args)
    def access(self, *args): return _yarp.ImageRgb_access(self, *args)
    def safePixel(self, *args): return _yarp.ImageRgb_safePixel(self, *args)
    def __init__(self): 
        this = _yarp.new_ImageRgb()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_ImageRgb
    __del__ = lambda self : None;
ImageRgb_swigregister = _yarp.ImageRgb_swigregister
ImageRgb_swigregister(ImageRgb)

class TypedReaderImageRgb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderImageRgb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderImageRgb, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setStrict(self, strict = True): return _yarp.TypedReaderImageRgb_setStrict(self, strict)
    def read(self, shouldWait = True): return _yarp.TypedReaderImageRgb_read(self, shouldWait)
    def interrupt(self): return _yarp.TypedReaderImageRgb_interrupt(self)
    def lastRead(self): return _yarp.TypedReaderImageRgb_lastRead(self)
    def isClosed(self): return _yarp.TypedReaderImageRgb_isClosed(self)
    def useCallback(self, *args): return _yarp.TypedReaderImageRgb_useCallback(self, *args)
    def disableCallback(self): return _yarp.TypedReaderImageRgb_disableCallback(self)
    def getPendingReads(self): return _yarp.TypedReaderImageRgb_getPendingReads(self)
    __swig_destroy__ = _yarp.delete_TypedReaderImageRgb
    __del__ = lambda self : None;
    def getName(self): return _yarp.TypedReaderImageRgb_getName(self)
    def setReplier(self, *args): return _yarp.TypedReaderImageRgb_setReplier(self, *args)
    def acquire(self): return _yarp.TypedReaderImageRgb_acquire(self)
    def release(self, *args): return _yarp.TypedReaderImageRgb_release(self, *args)
TypedReaderImageRgb_swigregister = _yarp.TypedReaderImageRgb_swigregister
TypedReaderImageRgb_swigregister(TypedReaderImageRgb)

class TypedReaderCallbackImageRgb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderCallbackImageRgb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderCallbackImageRgb, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_TypedReaderCallbackImageRgb
    __del__ = lambda self : None;
    def onRead(self, *args): return _yarp.TypedReaderCallbackImageRgb_onRead(self, *args)
    def __init__(self): 
        this = _yarp.new_TypedReaderCallbackImageRgb()
        try: self.this.append(this)
        except: self.this = this
TypedReaderCallbackImageRgb_swigregister = _yarp.TypedReaderCallbackImageRgb_swigregister
TypedReaderCallbackImageRgb_swigregister(TypedReaderCallbackImageRgb)

class BufferedPortImageRgb(Contactable,TypedReaderImageRgb,TypedReaderCallbackImageRgb):
    __swig_setmethods__ = {}
    for _s in [Contactable,TypedReaderImageRgb,TypedReaderCallbackImageRgb]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferedPortImageRgb, name, value)
    __swig_getmethods__ = {}
    for _s in [Contactable,TypedReaderImageRgb,TypedReaderCallbackImageRgb]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BufferedPortImageRgb, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _yarp.new_BufferedPortImageRgb()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_BufferedPortImageRgb
    __del__ = lambda self : None;
    def addOutput(self, *args): return _yarp.BufferedPortImageRgb_addOutput(self, *args)
    def close(self): return _yarp.BufferedPortImageRgb_close(self)
    def interrupt(self): return _yarp.BufferedPortImageRgb_interrupt(self)
    def getPendingReads(self): return _yarp.BufferedPortImageRgb_getPendingReads(self)
    def where(self): return _yarp.BufferedPortImageRgb_where(self)
    def getName(self): return _yarp.BufferedPortImageRgb_getName(self)
    def prepare(self): return _yarp.BufferedPortImageRgb_prepare(self)
    def unprepare(self): return _yarp.BufferedPortImageRgb_unprepare(self)
    def write(self, forceStrict = False): return _yarp.BufferedPortImageRgb_write(self, forceStrict)
    def writeStrict(self): return _yarp.BufferedPortImageRgb_writeStrict(self)
    def setStrict(self, strict = True): return _yarp.BufferedPortImageRgb_setStrict(self, strict)
    def read(self, shouldWait = True): return _yarp.BufferedPortImageRgb_read(self, shouldWait)
    def lastRead(self): return _yarp.BufferedPortImageRgb_lastRead(self)
    def isClosed(self): return _yarp.BufferedPortImageRgb_isClosed(self)
    def setReplier(self, *args): return _yarp.BufferedPortImageRgb_setReplier(self, *args)
    def onRead(self, *args): return _yarp.BufferedPortImageRgb_onRead(self, *args)
    def useCallback(self, *args): return _yarp.BufferedPortImageRgb_useCallback(self, *args)
    def disableCallback(self): return _yarp.BufferedPortImageRgb_disableCallback(self)
    def setEnvelope(self, *args): return _yarp.BufferedPortImageRgb_setEnvelope(self, *args)
    def getEnvelope(self, *args): return _yarp.BufferedPortImageRgb_getEnvelope(self, *args)
    def getInputCount(self): return _yarp.BufferedPortImageRgb_getInputCount(self)
    def getOutputCount(self): return _yarp.BufferedPortImageRgb_getOutputCount(self)
    def isWriting(self): return _yarp.BufferedPortImageRgb_isWriting(self)
    def getReport(self, *args): return _yarp.BufferedPortImageRgb_getReport(self, *args)
    def setReporter(self, *args): return _yarp.BufferedPortImageRgb_setReporter(self, *args)
    def acquire(self): return _yarp.BufferedPortImageRgb_acquire(self)
    def release(self, *args): return _yarp.BufferedPortImageRgb_release(self, *args)
BufferedPortImageRgb_swigregister = _yarp.BufferedPortImageRgb_swigregister
BufferedPortImageRgb_swigregister(BufferedPortImageRgb)

class ImageRgba(Image):
    __swig_setmethods__ = {}
    for _s in [Image]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageRgba, name, value)
    __swig_getmethods__ = {}
    for _s in [Image]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageRgba, name)
    __repr__ = _swig_repr
    def getPixelSize(self): return _yarp.ImageRgba_getPixelSize(self)
    def getPixelCode(self): return _yarp.ImageRgba_getPixelCode(self)
    def pixel(self, *args): return _yarp.ImageRgba_pixel(self, *args)
    def access(self, *args): return _yarp.ImageRgba_access(self, *args)
    def safePixel(self, *args): return _yarp.ImageRgba_safePixel(self, *args)
    def __init__(self): 
        this = _yarp.new_ImageRgba()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_ImageRgba
    __del__ = lambda self : None;
ImageRgba_swigregister = _yarp.ImageRgba_swigregister
ImageRgba_swigregister(ImageRgba)

class TypedReaderImageRgba(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderImageRgba, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderImageRgba, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setStrict(self, strict = True): return _yarp.TypedReaderImageRgba_setStrict(self, strict)
    def read(self, shouldWait = True): return _yarp.TypedReaderImageRgba_read(self, shouldWait)
    def interrupt(self): return _yarp.TypedReaderImageRgba_interrupt(self)
    def lastRead(self): return _yarp.TypedReaderImageRgba_lastRead(self)
    def isClosed(self): return _yarp.TypedReaderImageRgba_isClosed(self)
    def useCallback(self, *args): return _yarp.TypedReaderImageRgba_useCallback(self, *args)
    def disableCallback(self): return _yarp.TypedReaderImageRgba_disableCallback(self)
    def getPendingReads(self): return _yarp.TypedReaderImageRgba_getPendingReads(self)
    __swig_destroy__ = _yarp.delete_TypedReaderImageRgba
    __del__ = lambda self : None;
    def getName(self): return _yarp.TypedReaderImageRgba_getName(self)
    def setReplier(self, *args): return _yarp.TypedReaderImageRgba_setReplier(self, *args)
    def acquire(self): return _yarp.TypedReaderImageRgba_acquire(self)
    def release(self, *args): return _yarp.TypedReaderImageRgba_release(self, *args)
TypedReaderImageRgba_swigregister = _yarp.TypedReaderImageRgba_swigregister
TypedReaderImageRgba_swigregister(TypedReaderImageRgba)

class TypedReaderCallbackImageRgba(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderCallbackImageRgba, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderCallbackImageRgba, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_TypedReaderCallbackImageRgba
    __del__ = lambda self : None;
    def onRead(self, *args): return _yarp.TypedReaderCallbackImageRgba_onRead(self, *args)
    def __init__(self): 
        this = _yarp.new_TypedReaderCallbackImageRgba()
        try: self.this.append(this)
        except: self.this = this
TypedReaderCallbackImageRgba_swigregister = _yarp.TypedReaderCallbackImageRgba_swigregister
TypedReaderCallbackImageRgba_swigregister(TypedReaderCallbackImageRgba)

class BufferedPortImageRgba(Contactable,TypedReaderImageRgba,TypedReaderCallbackImageRgba):
    __swig_setmethods__ = {}
    for _s in [Contactable,TypedReaderImageRgba,TypedReaderCallbackImageRgba]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferedPortImageRgba, name, value)
    __swig_getmethods__ = {}
    for _s in [Contactable,TypedReaderImageRgba,TypedReaderCallbackImageRgba]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BufferedPortImageRgba, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _yarp.new_BufferedPortImageRgba()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_BufferedPortImageRgba
    __del__ = lambda self : None;
    def addOutput(self, *args): return _yarp.BufferedPortImageRgba_addOutput(self, *args)
    def close(self): return _yarp.BufferedPortImageRgba_close(self)
    def interrupt(self): return _yarp.BufferedPortImageRgba_interrupt(self)
    def getPendingReads(self): return _yarp.BufferedPortImageRgba_getPendingReads(self)
    def where(self): return _yarp.BufferedPortImageRgba_where(self)
    def getName(self): return _yarp.BufferedPortImageRgba_getName(self)
    def prepare(self): return _yarp.BufferedPortImageRgba_prepare(self)
    def unprepare(self): return _yarp.BufferedPortImageRgba_unprepare(self)
    def write(self, forceStrict = False): return _yarp.BufferedPortImageRgba_write(self, forceStrict)
    def writeStrict(self): return _yarp.BufferedPortImageRgba_writeStrict(self)
    def setStrict(self, strict = True): return _yarp.BufferedPortImageRgba_setStrict(self, strict)
    def read(self, shouldWait = True): return _yarp.BufferedPortImageRgba_read(self, shouldWait)
    def lastRead(self): return _yarp.BufferedPortImageRgba_lastRead(self)
    def isClosed(self): return _yarp.BufferedPortImageRgba_isClosed(self)
    def setReplier(self, *args): return _yarp.BufferedPortImageRgba_setReplier(self, *args)
    def onRead(self, *args): return _yarp.BufferedPortImageRgba_onRead(self, *args)
    def useCallback(self, *args): return _yarp.BufferedPortImageRgba_useCallback(self, *args)
    def disableCallback(self): return _yarp.BufferedPortImageRgba_disableCallback(self)
    def setEnvelope(self, *args): return _yarp.BufferedPortImageRgba_setEnvelope(self, *args)
    def getEnvelope(self, *args): return _yarp.BufferedPortImageRgba_getEnvelope(self, *args)
    def getInputCount(self): return _yarp.BufferedPortImageRgba_getInputCount(self)
    def getOutputCount(self): return _yarp.BufferedPortImageRgba_getOutputCount(self)
    def isWriting(self): return _yarp.BufferedPortImageRgba_isWriting(self)
    def getReport(self, *args): return _yarp.BufferedPortImageRgba_getReport(self, *args)
    def setReporter(self, *args): return _yarp.BufferedPortImageRgba_setReporter(self, *args)
    def acquire(self): return _yarp.BufferedPortImageRgba_acquire(self)
    def release(self, *args): return _yarp.BufferedPortImageRgba_release(self, *args)
BufferedPortImageRgba_swigregister = _yarp.BufferedPortImageRgba_swigregister
BufferedPortImageRgba_swigregister(BufferedPortImageRgba)

class ImageMono(Image):
    __swig_setmethods__ = {}
    for _s in [Image]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageMono, name, value)
    __swig_getmethods__ = {}
    for _s in [Image]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageMono, name)
    __repr__ = _swig_repr
    def getPixelSize(self): return _yarp.ImageMono_getPixelSize(self)
    def getPixelCode(self): return _yarp.ImageMono_getPixelCode(self)
    def pixel(self, *args): return _yarp.ImageMono_pixel(self, *args)
    def access(self, *args): return _yarp.ImageMono_access(self, *args)
    def safePixel(self, *args): return _yarp.ImageMono_safePixel(self, *args)
    def __init__(self): 
        this = _yarp.new_ImageMono()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_ImageMono
    __del__ = lambda self : None;
ImageMono_swigregister = _yarp.ImageMono_swigregister
ImageMono_swigregister(ImageMono)

class TypedReaderImageMono(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderImageMono, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderImageMono, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setStrict(self, strict = True): return _yarp.TypedReaderImageMono_setStrict(self, strict)
    def read(self, shouldWait = True): return _yarp.TypedReaderImageMono_read(self, shouldWait)
    def interrupt(self): return _yarp.TypedReaderImageMono_interrupt(self)
    def lastRead(self): return _yarp.TypedReaderImageMono_lastRead(self)
    def isClosed(self): return _yarp.TypedReaderImageMono_isClosed(self)
    def useCallback(self, *args): return _yarp.TypedReaderImageMono_useCallback(self, *args)
    def disableCallback(self): return _yarp.TypedReaderImageMono_disableCallback(self)
    def getPendingReads(self): return _yarp.TypedReaderImageMono_getPendingReads(self)
    __swig_destroy__ = _yarp.delete_TypedReaderImageMono
    __del__ = lambda self : None;
    def getName(self): return _yarp.TypedReaderImageMono_getName(self)
    def setReplier(self, *args): return _yarp.TypedReaderImageMono_setReplier(self, *args)
    def acquire(self): return _yarp.TypedReaderImageMono_acquire(self)
    def release(self, *args): return _yarp.TypedReaderImageMono_release(self, *args)
TypedReaderImageMono_swigregister = _yarp.TypedReaderImageMono_swigregister
TypedReaderImageMono_swigregister(TypedReaderImageMono)

class TypedReaderCallbackImageMono(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderCallbackImageMono, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderCallbackImageMono, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_TypedReaderCallbackImageMono
    __del__ = lambda self : None;
    def onRead(self, *args): return _yarp.TypedReaderCallbackImageMono_onRead(self, *args)
    def __init__(self): 
        this = _yarp.new_TypedReaderCallbackImageMono()
        try: self.this.append(this)
        except: self.this = this
TypedReaderCallbackImageMono_swigregister = _yarp.TypedReaderCallbackImageMono_swigregister
TypedReaderCallbackImageMono_swigregister(TypedReaderCallbackImageMono)

class BufferedPortImageMono(Contactable,TypedReaderImageMono,TypedReaderCallbackImageMono):
    __swig_setmethods__ = {}
    for _s in [Contactable,TypedReaderImageMono,TypedReaderCallbackImageMono]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferedPortImageMono, name, value)
    __swig_getmethods__ = {}
    for _s in [Contactable,TypedReaderImageMono,TypedReaderCallbackImageMono]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BufferedPortImageMono, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _yarp.new_BufferedPortImageMono()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_BufferedPortImageMono
    __del__ = lambda self : None;
    def addOutput(self, *args): return _yarp.BufferedPortImageMono_addOutput(self, *args)
    def close(self): return _yarp.BufferedPortImageMono_close(self)
    def interrupt(self): return _yarp.BufferedPortImageMono_interrupt(self)
    def getPendingReads(self): return _yarp.BufferedPortImageMono_getPendingReads(self)
    def where(self): return _yarp.BufferedPortImageMono_where(self)
    def getName(self): return _yarp.BufferedPortImageMono_getName(self)
    def prepare(self): return _yarp.BufferedPortImageMono_prepare(self)
    def unprepare(self): return _yarp.BufferedPortImageMono_unprepare(self)
    def write(self, forceStrict = False): return _yarp.BufferedPortImageMono_write(self, forceStrict)
    def writeStrict(self): return _yarp.BufferedPortImageMono_writeStrict(self)
    def setStrict(self, strict = True): return _yarp.BufferedPortImageMono_setStrict(self, strict)
    def read(self, shouldWait = True): return _yarp.BufferedPortImageMono_read(self, shouldWait)
    def lastRead(self): return _yarp.BufferedPortImageMono_lastRead(self)
    def isClosed(self): return _yarp.BufferedPortImageMono_isClosed(self)
    def setReplier(self, *args): return _yarp.BufferedPortImageMono_setReplier(self, *args)
    def onRead(self, *args): return _yarp.BufferedPortImageMono_onRead(self, *args)
    def useCallback(self, *args): return _yarp.BufferedPortImageMono_useCallback(self, *args)
    def disableCallback(self): return _yarp.BufferedPortImageMono_disableCallback(self)
    def setEnvelope(self, *args): return _yarp.BufferedPortImageMono_setEnvelope(self, *args)
    def getEnvelope(self, *args): return _yarp.BufferedPortImageMono_getEnvelope(self, *args)
    def getInputCount(self): return _yarp.BufferedPortImageMono_getInputCount(self)
    def getOutputCount(self): return _yarp.BufferedPortImageMono_getOutputCount(self)
    def isWriting(self): return _yarp.BufferedPortImageMono_isWriting(self)
    def getReport(self, *args): return _yarp.BufferedPortImageMono_getReport(self, *args)
    def setReporter(self, *args): return _yarp.BufferedPortImageMono_setReporter(self, *args)
    def acquire(self): return _yarp.BufferedPortImageMono_acquire(self)
    def release(self, *args): return _yarp.BufferedPortImageMono_release(self, *args)
BufferedPortImageMono_swigregister = _yarp.BufferedPortImageMono_swigregister
BufferedPortImageMono_swigregister(BufferedPortImageMono)

class ImageFloat(Image):
    __swig_setmethods__ = {}
    for _s in [Image]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [Image]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageFloat, name)
    __repr__ = _swig_repr
    def getPixelSize(self): return _yarp.ImageFloat_getPixelSize(self)
    def getPixelCode(self): return _yarp.ImageFloat_getPixelCode(self)
    def pixel(self, *args): return _yarp.ImageFloat_pixel(self, *args)
    def access(self, *args): return _yarp.ImageFloat_access(self, *args)
    def safePixel(self, *args): return _yarp.ImageFloat_safePixel(self, *args)
    def getPixel(self, *args): return _yarp.ImageFloat_getPixel(self, *args)
    def setPixel(self, *args): return _yarp.ImageFloat_setPixel(self, *args)
    def __init__(self): 
        this = _yarp.new_ImageFloat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_ImageFloat
    __del__ = lambda self : None;
ImageFloat_swigregister = _yarp.ImageFloat_swigregister
ImageFloat_swigregister(ImageFloat)

class TypedReaderImageFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderImageFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderImageFloat, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setStrict(self, strict = True): return _yarp.TypedReaderImageFloat_setStrict(self, strict)
    def read(self, shouldWait = True): return _yarp.TypedReaderImageFloat_read(self, shouldWait)
    def interrupt(self): return _yarp.TypedReaderImageFloat_interrupt(self)
    def lastRead(self): return _yarp.TypedReaderImageFloat_lastRead(self)
    def isClosed(self): return _yarp.TypedReaderImageFloat_isClosed(self)
    def useCallback(self, *args): return _yarp.TypedReaderImageFloat_useCallback(self, *args)
    def disableCallback(self): return _yarp.TypedReaderImageFloat_disableCallback(self)
    def getPendingReads(self): return _yarp.TypedReaderImageFloat_getPendingReads(self)
    __swig_destroy__ = _yarp.delete_TypedReaderImageFloat
    __del__ = lambda self : None;
    def getName(self): return _yarp.TypedReaderImageFloat_getName(self)
    def setReplier(self, *args): return _yarp.TypedReaderImageFloat_setReplier(self, *args)
    def acquire(self): return _yarp.TypedReaderImageFloat_acquire(self)
    def release(self, *args): return _yarp.TypedReaderImageFloat_release(self, *args)
TypedReaderImageFloat_swigregister = _yarp.TypedReaderImageFloat_swigregister
TypedReaderImageFloat_swigregister(TypedReaderImageFloat)

class TypedReaderCallbackImageFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderCallbackImageFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderCallbackImageFloat, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_TypedReaderCallbackImageFloat
    __del__ = lambda self : None;
    def onRead(self, *args): return _yarp.TypedReaderCallbackImageFloat_onRead(self, *args)
    def __init__(self): 
        this = _yarp.new_TypedReaderCallbackImageFloat()
        try: self.this.append(this)
        except: self.this = this
TypedReaderCallbackImageFloat_swigregister = _yarp.TypedReaderCallbackImageFloat_swigregister
TypedReaderCallbackImageFloat_swigregister(TypedReaderCallbackImageFloat)

class BufferedPortImageFloat(Contactable,TypedReaderImageFloat,TypedReaderCallbackImageFloat):
    __swig_setmethods__ = {}
    for _s in [Contactable,TypedReaderImageFloat,TypedReaderCallbackImageFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferedPortImageFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [Contactable,TypedReaderImageFloat,TypedReaderCallbackImageFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BufferedPortImageFloat, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _yarp.new_BufferedPortImageFloat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_BufferedPortImageFloat
    __del__ = lambda self : None;
    def addOutput(self, *args): return _yarp.BufferedPortImageFloat_addOutput(self, *args)
    def close(self): return _yarp.BufferedPortImageFloat_close(self)
    def interrupt(self): return _yarp.BufferedPortImageFloat_interrupt(self)
    def getPendingReads(self): return _yarp.BufferedPortImageFloat_getPendingReads(self)
    def where(self): return _yarp.BufferedPortImageFloat_where(self)
    def getName(self): return _yarp.BufferedPortImageFloat_getName(self)
    def prepare(self): return _yarp.BufferedPortImageFloat_prepare(self)
    def unprepare(self): return _yarp.BufferedPortImageFloat_unprepare(self)
    def write(self, forceStrict = False): return _yarp.BufferedPortImageFloat_write(self, forceStrict)
    def writeStrict(self): return _yarp.BufferedPortImageFloat_writeStrict(self)
    def setStrict(self, strict = True): return _yarp.BufferedPortImageFloat_setStrict(self, strict)
    def read(self, shouldWait = True): return _yarp.BufferedPortImageFloat_read(self, shouldWait)
    def lastRead(self): return _yarp.BufferedPortImageFloat_lastRead(self)
    def isClosed(self): return _yarp.BufferedPortImageFloat_isClosed(self)
    def setReplier(self, *args): return _yarp.BufferedPortImageFloat_setReplier(self, *args)
    def onRead(self, *args): return _yarp.BufferedPortImageFloat_onRead(self, *args)
    def useCallback(self, *args): return _yarp.BufferedPortImageFloat_useCallback(self, *args)
    def disableCallback(self): return _yarp.BufferedPortImageFloat_disableCallback(self)
    def setEnvelope(self, *args): return _yarp.BufferedPortImageFloat_setEnvelope(self, *args)
    def getEnvelope(self, *args): return _yarp.BufferedPortImageFloat_getEnvelope(self, *args)
    def getInputCount(self): return _yarp.BufferedPortImageFloat_getInputCount(self)
    def getOutputCount(self): return _yarp.BufferedPortImageFloat_getOutputCount(self)
    def isWriting(self): return _yarp.BufferedPortImageFloat_isWriting(self)
    def getReport(self, *args): return _yarp.BufferedPortImageFloat_getReport(self, *args)
    def setReporter(self, *args): return _yarp.BufferedPortImageFloat_setReporter(self, *args)
    def acquire(self): return _yarp.BufferedPortImageFloat_acquire(self)
    def release(self, *args): return _yarp.BufferedPortImageFloat_release(self, *args)
BufferedPortImageFloat_swigregister = _yarp.BufferedPortImageFloat_swigregister
BufferedPortImageFloat_swigregister(BufferedPortImageFloat)

class ImageRgbFloat(Image):
    __swig_setmethods__ = {}
    for _s in [Image]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageRgbFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [Image]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageRgbFloat, name)
    __repr__ = _swig_repr
    def getPixelSize(self): return _yarp.ImageRgbFloat_getPixelSize(self)
    def getPixelCode(self): return _yarp.ImageRgbFloat_getPixelCode(self)
    def pixel(self, *args): return _yarp.ImageRgbFloat_pixel(self, *args)
    def access(self, *args): return _yarp.ImageRgbFloat_access(self, *args)
    def safePixel(self, *args): return _yarp.ImageRgbFloat_safePixel(self, *args)
    def __init__(self): 
        this = _yarp.new_ImageRgbFloat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_ImageRgbFloat
    __del__ = lambda self : None;
ImageRgbFloat_swigregister = _yarp.ImageRgbFloat_swigregister
ImageRgbFloat_swigregister(ImageRgbFloat)

class TypedReaderImageRgbFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderImageRgbFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderImageRgbFloat, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setStrict(self, strict = True): return _yarp.TypedReaderImageRgbFloat_setStrict(self, strict)
    def read(self, shouldWait = True): return _yarp.TypedReaderImageRgbFloat_read(self, shouldWait)
    def interrupt(self): return _yarp.TypedReaderImageRgbFloat_interrupt(self)
    def lastRead(self): return _yarp.TypedReaderImageRgbFloat_lastRead(self)
    def isClosed(self): return _yarp.TypedReaderImageRgbFloat_isClosed(self)
    def useCallback(self, *args): return _yarp.TypedReaderImageRgbFloat_useCallback(self, *args)
    def disableCallback(self): return _yarp.TypedReaderImageRgbFloat_disableCallback(self)
    def getPendingReads(self): return _yarp.TypedReaderImageRgbFloat_getPendingReads(self)
    __swig_destroy__ = _yarp.delete_TypedReaderImageRgbFloat
    __del__ = lambda self : None;
    def getName(self): return _yarp.TypedReaderImageRgbFloat_getName(self)
    def setReplier(self, *args): return _yarp.TypedReaderImageRgbFloat_setReplier(self, *args)
    def acquire(self): return _yarp.TypedReaderImageRgbFloat_acquire(self)
    def release(self, *args): return _yarp.TypedReaderImageRgbFloat_release(self, *args)
TypedReaderImageRgbFloat_swigregister = _yarp.TypedReaderImageRgbFloat_swigregister
TypedReaderImageRgbFloat_swigregister(TypedReaderImageRgbFloat)

class TypedReaderCallbackImageRgbFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedReaderCallbackImageRgbFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedReaderCallbackImageRgbFloat, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yarp.delete_TypedReaderCallbackImageRgbFloat
    __del__ = lambda self : None;
    def onRead(self, *args): return _yarp.TypedReaderCallbackImageRgbFloat_onRead(self, *args)
    def __init__(self): 
        this = _yarp.new_TypedReaderCallbackImageRgbFloat()
        try: self.this.append(this)
        except: self.this = this
TypedReaderCallbackImageRgbFloat_swigregister = _yarp.TypedReaderCallbackImageRgbFloat_swigregister
TypedReaderCallbackImageRgbFloat_swigregister(TypedReaderCallbackImageRgbFloat)

class BufferedPortImageRgbFloat(Contactable,TypedReaderImageRgbFloat,TypedReaderCallbackImageRgbFloat):
    __swig_setmethods__ = {}
    for _s in [Contactable,TypedReaderImageRgbFloat,TypedReaderCallbackImageRgbFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferedPortImageRgbFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [Contactable,TypedReaderImageRgbFloat,TypedReaderCallbackImageRgbFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BufferedPortImageRgbFloat, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _yarp.new_BufferedPortImageRgbFloat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yarp.delete_BufferedPortImageRgbFloat
    __del__ = lambda self : None;
    def addOutput(self, *args): return _yarp.BufferedPortImageRgbFloat_addOutput(self, *args)
    def close(self): return _yarp.BufferedPortImageRgbFloat_close(self)
    def interrupt(self): return _yarp.BufferedPortImageRgbFloat_interrupt(self)
    def getPendingReads(self): return _yarp.BufferedPortImageRgbFloat_getPendingReads(self)
    def where(self): return _yarp.BufferedPortImageRgbFloat_where(self)
    def getName(self): return _yarp.BufferedPortImageRgbFloat_getName(self)
    def prepare(self): return _yarp.BufferedPortImageRgbFloat_prepare(self)
    def unprepare(self): return _yarp.BufferedPortImageRgbFloat_unprepare(self)
    def write(self, forceStrict = False): return _yarp.BufferedPortImageRgbFloat_write(self, forceStrict)
    def writeStrict(self): return _yarp.BufferedPortImageRgbFloat_writeStrict(self)
    def setStrict(self, strict = True): return _yarp.BufferedPortImageRgbFloat_setStrict(self, strict)
    def read(self, shouldWait = True): return _yarp.BufferedPortImageRgbFloat_read(self, shouldWait)
    def lastRead(self): return _yarp.BufferedPortImageRgbFloat_lastRead(self)
    def isClosed(self): return _yarp.BufferedPortImageRgbFloat_isClosed(self)
    def setReplier(self, *args): return _yarp.BufferedPortImageRgbFloat_setReplier(self, *args)
    def onRead(self, *args): return _yarp.BufferedPortImageRgbFloat_onRead(self, *args)
    def useCallback(self, *args): return _yarp.BufferedPortImageRgbFloat_useCallback(self, *args)
    def disableCallback(self): return _yarp.BufferedPortImageRgbFloat_disableCallback(self)
    def setEnvelope(self, *args): return _yarp.BufferedPortImageRgbFloat_setEnvelope(self, *args)
    def getEnvelope(self, *args): return _yarp.BufferedPortImageRgbFloat_getEnvelope(self, *args)
    def getInputCount(self): return _yarp.BufferedPortImageRgbFloat_getInputCount(self)
    def getOutputCount(self): return _yarp.BufferedPortImageRgbFloat_getOutputCount(self)
    def isWriting(self): return _yarp.BufferedPortImageRgbFloat_isWriting(self)
    def getReport(self, *args): return _yarp.BufferedPortImageRgbFloat_getReport(self, *args)
    def setReporter(self, *args): return _yarp.BufferedPortImageRgbFloat_setReporter(self, *args)
    def acquire(self): return _yarp.BufferedPortImageRgbFloat_acquire(self)
    def release(self, *args): return _yarp.BufferedPortImageRgbFloat_release(self, *args)
BufferedPortImageRgbFloat_swigregister = _yarp.BufferedPortImageRgbFloat_swigregister
BufferedPortImageRgbFloat_swigregister(BufferedPortImageRgbFloat)



