/*! \page yarpPorts Virtual Skin YARP Ports

\section Prerequisites

If you haven't done so already, please read the \ref reflexdemo. Before you try to connect to the ports described here, make sure you have the \ref skin running, and if you want to see anything interesting on \ref status or \ref collisions, make sure that \ref babbler is also running. The Virtual Skin tutorials assume you are working with the iCub robot. If that is the case, then throughout this document "NameOfYourRobot" should be replaced by "icub" or "icubSim" depending on whether you have connected the filter to the hardware or the simulator.

\section status Filter Status Port: /NameOfYourRobotF/status

To connect to the port run:
\verbatim yarp read /status \endverbatim
Then, in a new terminal:
\verbatim yarp connect /icubSimF/status /status \endverbatim

The filter status port simply streams a boolean value, indicating the status of the filter. A 1 means the filter is connected, and messages are being forwarded, whereas a 0 means that the filter has been cut, and messages are not being forwarded.

\section collisions Collision Reporting Port: /NameOfYourRobotF/collisions

To connect to the port run:
\verbatim yarp read /collisions \endverbatim
Then, in a new terminal:
\verbatim yarp connect /icubSimF/collisions /collisions \endverbatim

The collisions port streams the positions of collisions as they occur. Each collision is considered to involve exactly two geometries and to occur at exactly one point in cartesian space. That point is expressed twice, once in each of the local coordinate systems associated with the two colliding geometries (see "witnessed response" in the <a href="../SOLID/index.html">SOLID Documentation</a>). Each bottle in the stream represents a state of the entire robot, and collision events are therefore nested therein according to the following structure:

A point of collision on a geometry is represented in the local coordinate system of that geometry as a collision-point-bottle:
\verbatim ( geom-index x-position y-position z-position ) \endverbatim

A collision is represented by two such collision-point-bottles nested in a collision-bottle:
\verbatim (( geom1-index x-position y-position z-position )( geom2-index x-position y-position z-position )) \endverbatim

The state of the robot may involve many collisions, so all the collision-bottles are nested within a state-bottle.
\verbatim
(
	(( geom1-index x-position y-position z-position )( geom2-index x-position y-position z-position ))
	(( geom1-index x-position y-position z-position )( geom3-index x-position y-position z-position )) 
	(( geom2-index x-position y-position z-position )( geom3-index x-position y-position z-position )) 
)
\endverbatim

It is these state-bottles that are streamed on the collisions port.

\section world World RPC Interface Port: /NameOfYourRobotF/world

This RPC port allows you to add/update/remove objects to/in/from the world. Try connecting to it with:
\verbatim
yarp rpc /NameOfYourRobotF/world
\endverbatim

The RPC commands to interact with the world are very similar to the ones you would use with the iCub Simulator. Moreover, naming is handled the same way as in the Simulator, so the first time you make a sphere, it is named 'sph1', the second time it is 'sph2', ect. Deleting objects does not affect this naming. Only the command \c clr, which removes all objects, can reset the counters associated with naming.

The World RPC Interface of Virtual Skin differs from that of icub_SIM in the following ways:
- Although commands may begin with 'world', this need not be the case
- The objects 'box' and 'sbox', 'cyl' and 'scyl', 'sph' and 'ssph' are exactly the same respectively (Virtual Skin is not a dynamic simulation)
- Colors are not respected, however it won't hurt your commands if you specify them.
- The 'get' command is currently unsupported and will return 'unknown command' (since there are no dynamics, objects are wherever you put them last)
- There are commands to append objects to other objects and to delete individual objects (summarized below)

IMPORTANT: The world coordinate system used here is defined with respect to the robot such that:
- Z is up
- X is behind
- Y is right
.

This is the same convention used by the <a href="http://eris.liralab.it/wiki/ICubForwardKinematics">iCub Kinematics</a>. For some reason, this is not the convention used in the iCub Simulator.

Here is a list of supported commands:

To make a box:
\verbatim
mk box (three params for size) (three params for position)
mk sbox (three params for size) (three params for position)
\endverbatim
\note
- Any omitted params are assumed to be zero, so you do not have to set the position to '0 0 0' explicitly.

To make a sphere:
\verbatim
mk sph (radius) (three params for position)
mk ssph (radius) (three params for position)
\endverbatim
\note
- Any omitted params are assumed to be zero, so you do not have to set the position to '0 0 0' explicitly.

To make a cylinder:
\verbatim
mk cyl (radius length) (three params for position)
mk scyl (radius length) (three params for position)
\endverbatim
\note
- Any omitted params are assumed to be zero, so you do not have to set the position to '0 0 0' explicitly.

To make a constructive solid geometry (CSG) object:
\verbatim
mk csg (name) (three params for position)
\endverbatim
\note
- This is not a full-featured CSG object. It just allows you define an object as the union of several primitives, which need not be intersecting.
- Any omitted params are assumed to be zero, so you do not have to set the position to '0 0 0' explicitly.

To set the position of an object:
\verbatim
set (name) (three params for position)
set (type) (index) (three params for position)
\endverbatim
\note
- The second syntax is implemented in order to maintain compatibility with the iCub Simulator, so 'type' must be \c box, \c cyl, or \c sph.

To set the rotation of object:
\verbatim
rot (name) (three params for rotation)
rot (type) (index) (three params for rotation)
\endverbatim
\note
- Rotations are specified as an ordered triple of angles (in degrees) about the X, Y and Z axes respectively, and the rotations are carried out about Z, then Y, then X.
- The second syntax is implemented in order to maintain compatibility with the iCub Simulator, so 'type' must be \c box, \c cyl, or \c sph.

To append an object to another object (CSG modeling):
\verbatim
app (name) (type) (params)
\endverbatim
\note
- As previously, 'type' must be \c box, \c cyl, or \c sph. Logically, 'params' must contain all relevant params for that type (see the 'mk' commands). 
- The names of the primitives created by 'app' are generated as for the world, however each object has its own name scope, so the first cylinder appended to some object is 'cyl1' ect.
- You can also call 'app' on an object you created using 'mk', however this is not recommended, as it will cause the name generated by the 'mk' command (such as 'cyl1') to be somewhat misleading (as 'cyl1' would then refer to the union of two or more primitive objects.

To set the position of a primitive within a CSG object:
\verbatim
setp (csgName) (primitiveName) (three params for position)
\endverbatim

To set the rotation of a primitive within a CSG object:
\verbatim
rotp (csgName) (primitiveName) (three params for rotation)
\endverbatim
\note Rotations are specified as an ordered triple of angles (in degrees) about the X, Y and Z axes respectively, and the rotations are carried out about Z, then Y, then X.

To remove a primitive from a CSG object:
\verbatim
rm (primitiveName) (csgName)
\endverbatim

To remove a CSG object:
\verbatim
rm (name)
\endverbatim

To clear all objects from the world:
\verbatim
clr
\endverbatim
\note
- This also resets the counters used to generate names of objects and primitives



01-05-2011, Kail Frank - <a href="mailto:kail@idsia.ch">kail@idsia.ch</a>

 */
